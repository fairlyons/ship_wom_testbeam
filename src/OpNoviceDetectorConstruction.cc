// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
//
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#include "OpNoviceDetectorConstruction.hh"
#include "G4Material.hh"
#include "G4Element.hh"

#include "G4NistManager.hh"
#include "G4LogicalBorderSurface.hh"
#include "G4LogicalSkinSurface.hh"
#include "G4OpticalSurface.hh"

#include "G4RunManager.hh"
#include "G4LogicalVolume.hh"
#include "G4ThreeVector.hh"
#include "G4PVPlacement.hh"
#include "G4SystemOfUnits.hh"
#include "G4GeometryManager.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4SDManager.hh"
#include "G4MultiFunctionalDetector.hh"
#include "G4VPrimitiveScorer.hh"
#include "G4PSEnergyDeposit.hh"
#include "G4PSTrackLength.hh"
#include "G4PSNofStep.hh"
#include "G4SDParticleFilter.hh"
#include "G4UnionSolid.hh"
#include "G4PhysicalConstants.hh"
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

OpNoviceDetectorConstruction::OpNoviceDetectorConstruction()
 : G4VUserDetectorConstruction()
{
  fExpHall = 5*m;

  sipmSize = 3.4*mm;
  sipmSizeSens = 3*mm;
  sipmBaseThickness = 1.*mm;
  sipmWindowThickness =  0.15*mm;
  sipmSensThickness = 0.149*mm;
  sipmSensThicknessTop = 0.001*mm;

  SteelZ = 21*cm;
  WallThick = 5*mm;
  SctZ = SteelZ - WallThick*2;

  Diam_In_In = 44*mm;
  Diam_In_Out = 50*mm;
  Diam_Out_In = 64*mm;
  Diam_Out_Out = 70*mm;
  Diam_WOM_In = 54*mm;
  Diam_WOM_Out = 60*mm;
  Diam_Steel_Add = 120*mm;
  Diam_Hat = 120*mm;
  Thickness_Disk = 3*mm;
  Thickness_Ring = 3*mm;
  Thickness_Hat = 5*mm;
  Thickness_WLS = 0.02*mm;
  Thickness_Gap = 1*mm;
  Thickness_Steel_Add_Top = 16.19*mm - Thickness_Hat;
  Thickness_Steel_Add_Bot = 12*mm - Thickness_Hat;
  Length_Out = 200*mm;
  Length_WOM = 205*mm;
  Length_In = 195*mm;
  Length_sipm_box = 15*cm;

  ytl = 632;
  ytr = 618;
  ybl = 610;
  ybr = 638;
  double ytm = (ytl+ytr)/2;
  double ybm = (ybl+ybr)/2;
  double height = ytm+ybm;
  double womy = height/4;
  WOM_coord_vec = {{0*mm, 312.5*mm}, {0*mm, -312.5*mm}};
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

OpNoviceDetectorConstruction::~OpNoviceDetectorConstruction()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::DefineMaterials()
{
  G4NistManager* nist = G4NistManager::Instance();

  steel = nist->FindOrBuildMaterial("G4_STAINLESS-STEEL");
  
  Silicon = nist->FindOrBuildMaterial("G4_Si");
  Al = nist->FindOrBuildMaterial("G4_Al");
  
  G4double a, z, density;
  G4int nelements, ncomponent, natoms;

  // Air
  G4Element* N = new G4Element("Nitrogen","N", z = 7, a = 14.01*g/mole);
  G4Element* O = new G4Element("Oxygen","O", z = 8, a = 16.00*g/mole);

  air = new G4Material("Air", density = 1.29*mg/cm3, nelements = 2);
  air->AddElement(N, 70.*perCent);
  air->AddElement(O, 30.*perCent);

  // Linear alkyl benzene (LAB)
  G4Element* H = new G4Element("Hydrogen", "H", 1, 1.01*g/mole);
  G4Element* C = new G4Element("Carbon", "C", 6, 12.01*g/mole);
  G4Material* LAB = new G4Material("LAB", density = 0.856*g/cm3, ncomponent = 2);  //density: https://www.knowde.com/stores/sasol/documents/101895
  LAB->AddElement(H, natoms = 28);
  LAB->AddElement(C, natoms = 17);
  // Diphenyloxazole (PPO)
  G4Material* PPO = new G4Material("PPO", density = 1.128*g/cm3, ncomponent = 4); // density: https://www.echemi.com/sds/24-diphenyloxazole-pid_Rock24446.html
  PPO->AddElement(H, natoms = 11);
  PPO->AddElement(C, natoms = 15);
  PPO->AddElement(N, natoms = 1);
  PPO->AddElement(O, natoms = 1);
  // Scintillator (LAB+PPO) 23233 cm^3 23.233 l
  LAB_PPO = new G4Material("LAB_PPO", density = 0.9*g/cm3, ncomponent = 2); //??
  LAB_PPO->AddMaterial(LAB, 99.77*perCent); //Calculated considering  be 2 g/L of PPO (First measurement of the surface tension of a liquid scintillator based on Linear Alkylbenzene (HYBLENE 113)). 2g of PPO every liter of LAB
  LAB_PPO->AddMaterial(PPO, 0.23*perCent);
  // Bis-MSB WLS
  Bis_MSB = new G4Material("Bis_MSB", density = 1.076*g/cm3, ncomponent = 2); // density: http://www.molbase.com/moldata/368101.html
  Bis_MSB->AddElement(H, natoms = 22);
  Bis_MSB->AddElement(C, natoms = 24);
  // PEMA to build the WLS dye coat  
  PEMA = new G4Material("PEMA", density = 1.11*g/cm3, ncomponent = 3); // density: https://polymerdatabase.com/polymers/polyethylmethacrylate.html
  PEMA->AddElement(H, natoms = 10);
  PEMA->AddElement(C, natoms = 6);
  PEMA->AddElement(O, natoms = 242);
  // PTP (para-Terphenyl) to build the scintillator C18H14 and the dye coat
  PTP = new G4Material("PTP", density = 1.23*g/cm3, ncomponent = 2); //  density: https://m.molbase.com/moldata/64879.html   
  PTP->AddElement(H, natoms = 14);
  PTP->AddElement(C, natoms = 18);
  /// WLS Coating  (150g PEMA, 3g PTP 1.5g bis-MSB)
  WLS_Coat = new G4Material("WLSCoat", density = 1.1*g/cm3, ncomponent = 3); // density: same as PEMA 
  WLS_Coat->AddMaterial(Bis_MSB, 0.97*perCent);
  WLS_Coat->AddMaterial(PTP, 1.94*perCent);
  WLS_Coat->AddMaterial(PEMA, 97.09*perCent);
  // PMMA side
  PMMA_side = new G4Material("PMMA_side", density = 1.200*g/cm3, ncomponent = 2);
  PMMA_side->AddElement(H, natoms = 2);
  PMMA_side->AddElement(C, natoms = 4);
  // PMMA bottom
  PMMA_bottom = new G4Material("PMMA_bottom", density = 1.200*g/cm3, ncomponent = 2);
  PMMA_bottom->AddElement(H, natoms = 2);
  PMMA_bottom->AddElement(C, natoms = 4);
  // Silicone resin
  G4Element* Si = new G4Element("Silicon", "Si", 14, 28.0855*g/mole);
  ResinSi = new G4Material("ResinSi", density = 3*g/cm3, ncomponent=2); 
  ResinSi->AddElement(Si,natoms=1);
  ResinSi->AddElement(O,natoms=4);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::DefineMPTs()
{
  //------------------------------------------------------------------------------
  //----------------------------- LAB_PPO -----------------------------
  //------------------------------------------------------------------------------
  G4double rindex_LAB_PPO[100];
  G4double photon_en_LAB_PPO[100];
  auto Ridndex_LAB_PPO = [=](G4double wl) {
    G4double rind = 1.;
    G4double B[4], C[4];
    B[0] = 0.821384; C[0] = 94.7625;
    B[1] = 0.311375; C[1] = 160.751;
    B[2] = 0.0170099; C[2] = 219.575;
    B[3] = 0.608268; C[3] = 9385.54;
    for(int term = 0; term < 4; term++) rind += B[term]/(1.-(C[term]/wl)*(C[term]/wl)); //formula eand coefficients: https://arxiv.org/pdf/1105.2101.pdf
    return sqrt(rind);
  };

  G4double wl;
  for(unsigned int i = 0; i < sizeof(photon_en_LAB_PPO)/sizeof(photon_en_LAB_PPO[0]); i++) {
    wl = 745. - 5.*i;
    photon_en_LAB_PPO[i] = 1240./wl*eV;
    rindex_LAB_PPO[i] = Ridndex_LAB_PPO(wl);
  }
  G4MaterialPropertiesTable *MPT_LAB_PPO = new G4MaterialPropertiesTable();
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONYIELD",10830./MeV); // https://arxiv.org/pdf/2011.12924
  MPT_LAB_PPO->AddProperty("RINDEX", photon_en_LAB_PPO, rindex_LAB_PPO, 100);//->SetSpline(true);

  // emission
  G4double photonWaveLength3[201] = {500,499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,446,445,444,443,442,441,440,439,438,437,436,435,434,433,432,431,430,429,428,427,426,425,424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,406,405,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,388,387,386,385,384,383,382,381,380,379,378,377,376,375,374,373,372,371,370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302,301,300};
  G4double photon_en_LAB_PPO_2[201];
  for(unsigned int i = 0; i < sizeof(photonWaveLength3)/sizeof(photonWaveLength3[0]); i++) photon_en_LAB_PPO_2[i] = 1240./photonWaveLength3[i]*eV;

  G4double scintilFast_LAB_PPO[201] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0025,0.005,0.0075,0.01,0.0125,0.015,0.0175,0.02,0.0225,0.025,0.025,0.025,0.025,0.025,0.025,0.025,0.025,0.025,0.025,0.025,0.0275,0.03,0.0325,0.035,0.0375,0.04,0.0425,0.045,0.0475,0.05,0.0525,0.055,0.0575,0.06,0.0625,0.065,0.0675,0.07,0.0725,0.075,0.08,0.085,0.09,0.095,0.1,0.105,0.11,0.115,0.12,0.125,0.1325,0.14,0.1475,0.155,0.1625,0.17,0.1775,0.185,0.1925,0.2,0.2075,0.215,0.2225,0.23,0.2375,0.245,0.2525,0.26,0.2675,0.275,0.29,0.305,0.32,0.335,0.35,0.365,0.38,0.395,0.41,0.425,0.4325,0.44,0.4475,0.455,0.4625,0.47,0.4775,0.485,0.4925,0.5,0.53,0.56,0.59,0.62,0.65,0.68,0.71,0.74,0.77,0.8,0.795,0.79,0.785,0.78,0.775,0.77,0.765,0.76,0.755,0.75,0.77,0.79,0.81,0.83,0.85,0.87,0.89,0.91,0.93,0.95,0.9,0.85,0.8,0.75,0.7,0.65,0.6,0.55,0.5,0.45,0.405,0.36,0.315,0.27,0.225,0.18,0.135,0.09,0.045,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}; //https://arxiv.org/abs/1001.3946 
  MPT_LAB_PPO->AddProperty("SCINTILLATIONCOMPONENT1", photon_en_LAB_PPO_2, scintilFast_LAB_PPO, 201, false, true);
  MPT_LAB_PPO->AddProperty("SCINTILLATIONCOMPONENT2", photon_en_LAB_PPO_2, scintilFast_LAB_PPO, 201, false, true);

  // transmission

  G4double absLen_purified[151] = {8.69251407037729*m,9.02995755323176*m,9.27373907607242*m,9.2987694632999*m,9.37254639295624*m,9.31493016410715*m,9.32945396614867*m,9.36095897891052*m,9.48082544118919*m,9.60814130202656*m,9.82801139775702*m,10.1046947101091*m,10.4907062873286*m,10.5108807867562*m,10.4753853636081*m,10.8002040964469*m,11.4980811433371*m,11.9325107778151*m,11.6636028590624*m,11.7094782859565*m,10.9852633716743*m,10.670267622928*m,10.3800086540752*m,10.3082593229783*m,10.3275701553562*m,10.3319544221576*m,10.2662283365215*m,10.2925732890662*m,10.3153782242223*m,10.3860868021326*m,10.3365901053944*m,10.231517114707*m,9.92788014563769*m,9.61898800830966*m,9.54402290594051*m,9.62746317964499*m,9.79692373936646*m,9.91423094765397*m,9.9643151940587*m,10.0187720504539*m,10.0358961669191*m,10.0802588950859*m,10.1054177127325*m,10.0818415254723*m,10.086029649153*m,10.1133311242014*m,10.1350472968498*m,10.0761167690658*m,9.90904041225772*m,9.77530373579883*m,9.66256670125958*m,9.65338010651176*m,9.63069786946983*m,9.62140630852179*m,9.71997172370098*m,9.79744658014088*m,9.80672901676583*m,9.78343285609755*m,9.72163465573446*m,9.80518793240826*m,9.69593799132894*m,9.67791627886446*m,9.59985620139408*m,9.55705239801755*m,9.57416795211246*m,9.56671620921144*m,9.59797651082656*m,9.56114765877604*m,9.53375540026655*m,9.55647549660189*m,9.54447464256824*m,9.53291003815433*m,9.49239969544417*m,9.49917662439382*m,9.42391963661282*m,9.3663798468712*m,9.32376570267581*m,9.22629281746381*m,9.17977310076775*m,9.12179277182491*m,9.00886669573072*m,8.85479490604375*m,8.71252334840956*m,8.50086621234753*m,8.33199872471845*m,8.18529383430015*m,8.02793280531241*m,7.84805101504057*m,7.67375314752583*m,7.46193191606457*m,7.24933185585757*m,7.00057529008316*m,6.78144433425612*m,6.57082163294415*m,6.3463075559428*m,6.13214412943496*m,5.9379419460511*m,5.73334467669744*m,5.53766879317458*m,5.3394385508064*m,5.15238124063095*m,4.98340338198499*m,4.8012155457967*m,4.60195158864653*m,4.41961657539783*m,4.22693302308812*m,4.0416225005906*m,3.87499604590985*m,3.71820540936771*m,3.5472216422986*m,3.36485969966114*m,3.15134802038665*m,2.90168745463681*m,2.5867387338465*m,2.16375663283064*m,1.66966271660288*m,1.14377099881739*m,0.680589789294733*m,0.360363924864896*m,0.181782601946722*m,0.093267712946957*m,0.0503991725824*m,0.02880952553709*m,0.01737142379557*m,0.013310009583829*m,0.013096262643175*m,0.013063354253155*m,0.013043343934459*m,0.013030737069578*m,0.013019803591978*m,0.013008275438005*m,0.012998844829755*m,0.012996396487048*m,0.012992079547825*m,0.012984198598302*m,0.012978816961298*m,0.012975348745523*m,0.012968698731763*m,0.012962219216222*m,0.012956981482458*m,0.012941499851657*m,0.012919404279236*m,0.012913555972765*m,0.012909301261196*m,0.012901893060039*m,0.012901203446858*m,0.012897730665173*m,0.012889608969039*m,0.012882419482255*m,0.012878996045324*m,0.0128715069987*m}; // Patrick measurement Mainz Column00+ppo

  G4double waveLength_Nov24[400] = {699,698,697,696,695,694,693,692,691,690,689,688,687,686,685,684,683,682,681,680,679,678,677,676,675,674,673,672,671,670,669,668,667,666,665,664,663,662,661,660,659,658,657,656,655,654,653,652,651,650,649,648,647,646,645,644,643,642,641,640,639,638,637,636,635,634,633,632,631,630,629,628,627,626,625,624,623,622,621,620,619,618,617,616,615,614,613,612,611,610,609,608,607,606,605,604,603,602,601,600,599,598,597,596,595,594,593,592,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,575,574,573,572,571,570,569,568,567,566,565,564,563,562,561,560,559,558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,539,538,537,536,535,534,533,532,531,530,529,528,527,526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,510,509,508,507,506,505,504,503,502,501,500,499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,446,445,444,443,442,441,440,439,438,437,436,435,434,433,432,431,430,429,428,427,426,425,424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,406,405,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,388,387,386,385,384,383,382,381,380,379,378,377,376,375,374,373,372,371,370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302,301,300};
  G4double photon_en_LAB_PPO_Nov24[400];
  for(unsigned int i = 0; i < sizeof(waveLength_Nov24)/sizeof(waveLength_Nov24[0]); i++) photon_en_LAB_PPO_Nov24[i] = 1240./waveLength_Nov24[i]*eV;

  G4double absLen_Nov24[400] = {12.4580680699719*m,12.882393846547*m,13.3325499463761*m,14.1253500712539*m,15.2343938245463*m,16.5450244084404*m,17.6105787256499*m,18.9460026372601*m,21.5589606072751*m,21.7623291927718*m,24.6226602762928*m,27.1948203292632*m,31.650656411708*m,34.790177393968*m,39.0728278860325*m,42.177821346857*m,49.8701822303783*m,50.6746573265949*m,54.8906069202791*m,57.6465215799896*m,71.7190127905617*m,66.8428153377577*m,60.41097259052*m,100.513679790138*m,99.7804668473837*m,128.328132364111*m,119.115326920801*m,221.833473095764*m,406.072446894074*m,153.936901002477*m,199.859402647596*m,214.492891444983*m,403.431938646729*m,168.445450190339*m,154.553196424641*m,97.5559009273304*m,97.2990885971197*m,118.489729746469*m,72.2980659153068*m,43.2618086866643*m,33.9014466221657*m,27.1057112423819*m,23.4070541098013*m,20.0174910732864*m,17.1336219332579*m,14.4865025627144*m,13.4244530911952*m,12.6201620606681*m,12.0121833230512*m,11.2844062997371*m,11.1995069872932*m,11.684084018678*m,12.0331513501311*m,12.4929194466356*m,13.2144981577135*m,13.7405611761176*m,14.2867076320626*m,14.8020034578184*m,14.5531292122933*m,14.5425300557785*m,14.5076742313726*m,13.8366528432167*m,14.3194461391162*m,15.179416196823*m,16.4241082330814*m,19.0528085790607*m,21.1171098878369*m,23.3519905339761*m,27.3149773233909*m,32.0956661027808*m,39.7232673514363*m,50.0065611506665*m,59.8490294154549*m,75.9488448307171*m,86.5128450106073*m,123.668963324053*m,192.719983116593*m,181.314886526764*m,175.330836476881*m,287.850526563859*m,417.390179676314*m,585.10539838761*m,228.095841361989*m,149.976511077695*m,99.6659740569694*m,68.186125831652*m,43.209081877749*m,37.0471503660193*m,30.7476004073245*m,25.8412484613316*m,24.1839003203728*m,24.9741647782892*m,26.69050068852*m,27.4119566347344*m,34.2368531299371*m,39.03156644602*m,48.9704552013589*m,58.7658715135819*m,70.9399676499926*m,90.2195755810448*m,99.7117396288033*m,169.828715203149*m,240.07434049378*m,259.939836572349*m,404.936579909785*m,231.716410272506*m,2334.91656964093*m,-1107.18797183764*m,1242.61654349996*m,6095.36115021508*m,-435.601285810702*m,-683.659160886701*m,-1385.30935232326*m,1118.59493098054*m,0*m,-488.932712584622*m,-2210.15003538613*m,-485.38081246524*m,-446.345819068101*m,725.335251696409*m,176.506597014125*m,168.18452200726*m,177.698233205089*m,144.970201770255*m,107.299439642556*m,98.720118645962*m,106.680049607774*m,95.1826161751683*m,73.058202027631*m,63.8081883494218*m,60.0020008224996*m,62.9435098305376*m,66.1882926088931*m,71.6273420942982*m,67.9115687182566*m,72.5426119268804*m,73.7529900574432*m,88.4465112679101*m,135.209988154811*m,147.531034209173*m,150.509264236095*m,143.461716724174*m,103.42807381597*m,109.927097880973*m,140.434755684156*m,234.215710909127*m,272.114337063437*m,468.115852280498*m,511.235411363438*m,666.862928143169*m,376.664771858843*m,730.213504755356*m,-547.315037118154*m,-1200.53761424535*m,0*m,-927.484211325839*m,-1917.41493136174*m,-1704.78697528299*m,929.966770777723*m,384.75701612691*m,461.76978410765*m,243.677644524198*m,204.470095081571*m,164.770741516932*m,111.143821357199*m,94.4272396484766*m,86.6682262928073*m,80.3839677855268*m,83.7678622727845*m,84.8853128665042*m,88.6677178344741*m,86.8632395526282*m,93.5677005177754*m,82.9875282001163*m,83.9216390247844*m,78.8658431839571*m,73.0090748849718*m,73.8564656185121*m,68.2638292916154*m,68.3524661740317*m,67.9062593938327*m,55.0628523190283*m,48.4217283926032*m,45.7115998161468*m,42.2362734698037*m,42.4769036313917*m,42.5945941499858*m,42.1737255180265*m,37.4085431718212*m,37.1152211903222*m,38.662377099017*m,39.285780497366*m,37.3538452632569*m,38.473145257525*m,39.6615965254116*m,40.2431933609707*m,39.7214507662922*m,40.5683643028661*m,42.4654817593877*m,45.8176955772921*m,46.6958208648199*m,46.3383373206282*m,44.3882340508236*m,46.9215873325509*m,50.5728654385162*m,60.2412847318733*m,66.2943797822105*m,64.9873902140972*m,66.8711189396046*m,77.0538003021966*m,81.0553344444301*m,80.7276326879977*m,79.9584796010786*m,93.3314311402256*m,98.1456456391544*m,84.546548294789*m,77.0230525766174*m,65.3049858205722*m,52.3751184217629*m,42.9834944405055*m,43.2758190377419*m,42.9261392130528*m,37.5070802274167*m,36.6779538418816*m,33.8697197857874*m,31.7136376182163*m,32.0134514192288*m,30.0181079955943*m,27.8046340762033*m,26.922556029648*m,24.1502798172306*m,24.4332258936558*m,23.8538149536297*m,22.5862718631835*m,22.631291399336*m,22.5236029900428*m,21.2957305981444*m,20.9144836663781*m,20.3922844510146*m,19.3374289287363*m,19.1991548353599*m,19.1047732605993*m,19.1792299043128*m,19.0515548711167*m,18.8352805791286*m,18.473344830365*m,19.0471681923274*m,18.6370485008532*m,17.9057280897672*m,18.1437978778321*m,17.7931203684554*m,17.206766388465*m,17.3568523850791*m,16.3187315323479*m,17.0211437175488*m,16.5088611080144*m,16.9127667875171*m,16.4130906530837*m,16.8448716916166*m,16.6948049378985*m,16.0995897000336*m,15.3910987765731*m,14.4288674691271*m,14.4184484766567*m,13.8564084534819*m,14.1260392415901*m,13.4473148982307*m,13.161336210901*m,13.354894200503*m,12.8408761341836*m,12.3403654690779*m,12.4601232817122*m,12.8010399526405*m,12.7104689866545*m,12.4797264929097*m,12.1136201706543*m,12.0894256392962*m,11.7519021506621*m,12.0815222954143*m,12.3982295101383*m,11.9146371641886*m,11.6582080801363*m,11.8387984394629*m,11.6979315422115*m,11.3046002981261*m,11.3454281876802*m,11.2508609091282*m,11.2416144839096*m,11.1088383776045*m,10.7855705945614*m,10.8335282866009*m,10.681189184716*m,10.6128680999782*m,10.4064380788282*m,10.2682227675436*m,10.1171060458399*m,10.1664263013275*m,9.76156533067936*m,10.0063241775323*m,9.59051496294493*m,9.57112278549566*m,9.40087303796779*m,9.34388609809285*m,9.35359609640718*m,9.24768660001613*m,8.73933064596523*m,8.5497771862599*m,8.32017629022818*m,8.27708443864069*m,8.0170659150981*m,7.47070479681519*m,7.60256249617298*m,7.51030205793637*m,7.19170504118363*m,7.01719957914457*m,6.91092278546122*m,6.62908380644077*m,6.40219475793569*m,6.17448116856359*m,5.83738949852326*m,5.82628882222761*m,5.53014184558901*m,5.08160724928926*m,4.81929609367128*m,4.3517571277162*m,3.88633017182001*m,3.41719305028096*m,2.98150681593789*m,2.51408572749498*m,2.053244050768*m,1.65838475149977*m,1.27903048655832*m,0.962102434203822*m,0.697534917468037*m,0.495439098265721*m,0.347264245383933*m,0.242372322187538*m,0.16883244040257*m,0.118652173401374*m,0.0844368465563929*m,0.0611880109640019*m,0.0450736106876209*m,0.0337621102180351*m,0.02570764785179*m,0.019936230425597*m,0.0160447890621714*m,0.0139940761402532*m,0.0133849871147292*m,0.0132947848639157*m,0.0132539712182759*m,0.0132309868699982*m,0.0131913486753763*m,0.0132257916920251*m,0.0132159827189247*m,0.013191218356567*m,0.0132242270080607*m,0.0131926034136305*m,0.013171113335959*m,0.0131320032846831*m,0.0131628804616752*m,0.0131223995953565*m,0.0131125572515512*m,0.0131425275732781*m,0.0131219019087377*m,0.0131147924146512*m,0.0130933535622113*m,0.0131474543414792*m,0.0131070167320757*m,0.013107407665832*m,0.0130857011536725*m,0.0131095111769513*m,0.0130333871184686*m,0.0131776570533003*m,0.0131300196750465*m,0.0131113448070356*m,0.013062271227831*m,0.0130822748317603*m,0.0130707968467636*m,0.013060976738693*m,0.0130948993717318*m,0.0130727265956882*m,0.0130834655483809*m,0.013084198018198*m,0.0130693648788994*m,0.01306567607206*m,0.0130507946718952*m,0.0130472260894379*m,0.0130597883444887*m,0.0130449987121769*m,0.013037169936161*m,0.0130299721054622*m,0.013046834621835*m,0.0130231056595336*m,0.0130280821194255*m,0.0130084294361841*m,0.0130214402012258*m,0.0130259817034747*m,0.0130018029626347*m,0.0129984556379417*m,0.0129786555692698*m}; // SHiP-LS-SBT_TB2024-11_SASOLABC12Hpurified-2glPPOBHT_TBend_2024-11-13_drainendA.txt from Annika (corrected) 04.12.2024

  MPT_LAB_PPO->AddProperty("ABSLENGTH", photon_en_LAB_PPO_Nov24, absLen_Nov24, 400, true, true);
  MPT_LAB_PPO->AddConstProperty("RESOLUTIONSCALE", 1.0); //??
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONTIMECONSTANT1", 4.3*ns); // https://pubs.rsc.org/en/content/articlepdf/2020/ma/d0ma00055h
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONTIMECONSTANT2", 13.4*ns); // https://pubs.rsc.org/en/content/articlepdf/2020/ma/d0ma00055h
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONTIMECONSTANT3", 86*ns); // https://pubs.rsc.org/en/content/articlepdf/2020/ma/d0ma00055h
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONYIELD1",0.82);
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONYIELD2",0.15);
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONYIELD3",0.037);
  LAB_PPO->SetMaterialPropertiesTable(MPT_LAB_PPO);


  //------------------------------------------------------------------------------
  //----------------------------- PMMA -----------------------------
  //------------------------------------------------------------------------------
  const G4int pmma_mpt_entr = 13;

  G4double pmma_refl_index_wl[pmma_mpt_entr] = {700.,600.,550.,500.,450.,400.,390.,380.,370.,350.,320.,310.,300.};
  G4double pmma_side_wl[8] = {632,543,440,405,375,320,310,300};
  G4double pmma_bottom_wl[37] = {632,543,440,405,375,358.8171433,353.7663967,348.7156502,343.6649037,338.6141572,333.5634107,328.5126642,323.4619177,318.4111712,313.3604247,308.3096782,303.2589317,298.3612381,293.1574387,288.1066922,283.0559457,278.0051992,272.9544526,267.9037061,262.8529596,257.8022131,252.7514666,247.8920363,242.6499736,237.5992271,232.5484806,227.4977341,222.4469876,217.3962411,212.3454946,207.2947481,202.0526854};
  G4double pmma_rind[pmma_mpt_entr] = {1.487,1.490,1.493,1.496,1.500,1.507,1.509,1.511,1.513,1.517,1.526,1.530,1.534}; // https://refractiveindex.info/?shelf=3d&book=plastics&page=pmma
  G4double pmma_refl_index_en[pmma_mpt_entr];
  G4double pmma_side_en[8];
  G4double pmma_bottom_en[37];
  for(int i = 0; i < pmma_mpt_entr; i++) pmma_refl_index_en[i] = 1240./pmma_refl_index_wl[i]*eV;
  for(unsigned int i = 0; i < sizeof(pmma_side_en)/sizeof(pmma_side_en[0]); i++) pmma_side_en[i] = 1240./pmma_side_wl[i]*eV;
  for(unsigned int i = 0; i < sizeof(pmma_bottom_en)/sizeof(pmma_bottom_en[0]); i++) pmma_bottom_en[i] = 1240./pmma_bottom_wl[i]*eV;
  G4double pmma_side_abslen[8] = {1.5*m,1*m,1*m,1*m,604.44*mm,24.6*mm,18.23*mm,10.55*mm}; // Tecacryl 3-4 / RTP 1-2-3 / Spartech 1-2 /Mc Master 	(From Micheal: https://arxiv.org/pdf/1310.6454.pdf)	for >375nm --- old measurements from the tube for <375nm 

  G4double pmma_bottom_abslen[37] = {17900*mm,125150*mm,2440*mm,262.5*mm,95*mm,0.353271102*mm,0.307327896*mm,0.301885495*mm,0.301900827*mm,0.301917182*mm,0.301934641*mm,0.301953291*mm,0.301973222*mm,0.301994529*mm,0.302017312*mm,0.302041678*mm,0.302067738*mm,0.341435928*mm,0.302125414*mm,0.347533944*mm,0.437466744*mm,0.556750518*mm,0.647685273*mm,0.644020575*mm,0.53581648*mm,0.367918167*mm,0.302452281*mm,0.32079176*mm,0.302566913*mm,0.302631272*mm,0.302701282*mm,0.302777948*mm,0.302862616*mm,0.30295711*mm,0.303063921*mm,0.303186472*mm,0.321725432*mm}; //RPT 4 / Spartech 3-4	 (From Micheal: https://arxiv.org/pdf/1310.6454.pdf) for >375nm --- andrew and doramas measurement for <375nm
  
  G4double pmma_side_wl_new[57] = {550,545,540,535,530,525,520,515,510,505,500,495,490,485,480,475,470,465,460,455,450,445,440,435,430,425,420,415,410,405,400,395,390,385,380,375,370,365,360,355,350,345,340,335,330,325,320,315,310,305,300,295,290,285,280,275,270};
  
  G4double pmma_side_abslen_new[57] = {472.626403500485,472.47431927557,472.442875276582,472.548069065499,472.503941286975,472.717214657718,473.449818351276,473.924385233674,475.069753001741,474.877497105366,475.03999205846,473.890412182362,475.831343905636,473.79358106133,475.253004464295,470.790625727439,470.497047736906,472.259113792486,472.931200356411,472.365745218049,470.881247507505,470.708148061025,469.722655892388,469.20573460488,468.340978652268,467.724990027454,466.424650040469,465.387657347346,464.676776284062,463.446924175645,462.489280782535,461.435833610124,459.974991506271,458.087943295396,455.842768535932,452.224327990847,449.384367527057,444.861880129657,439.189956124801,432.269666813194,423.7477750101,414.172287702685,404.353357130681,390.519697889426,369.419537577731,346.777708977586,327.537561287855,296.568368423133,257.906895924098,214.610379424564,175.424523581044,141.385052228302,112.73196443914,90.6391278206925,73.2747503375892,57.4643292737885,44.7190787748292}; // from John Rack-Helleis (Mainz) measurements and corrected with Christian Scharf (Berlin) thesis formula 
  
  G4double pmma_bottom_wl_new[58] = {545,540,535,530,525,520,515,510,505,500,495,490,485,480,475,470,465,460,455,450,445,440,435,430,425,420,415,410,405,400,395,390,385,380,375,370,365,360,355,350,345,340,335,330,325,320,315,310,305,300,295,290,285,280,275,270,265,260};
  
  G4double pmma_bottom_abslen_new[58] = {351.350063334171,351.999125361121,350.789205816769,350.157544826916,349.964814524976,349.905090650762,349.209562761158,349.2001239779,349.050276048572,348.952244986273,348.460024783965,347.714842442585,347.227536096873,346.878098226731,346.294344025831,346.316453434341,345.45962390967,344.223231991828,343.439096892365,342.746147890309,341.376979566388,341.060656138989,340.221475069691,339.08960889221,337.887636842857,336.098835449247,333.584401979514,328.567896278262,316.064904235738,286.663031783464,229.193328437948,150.621295694047,82.6320843414912,43.3974238845659,23.9716600974233,15.1960657437843,12.4427779773735,12.1974417410274,12.4676517189804,12.9540782532771,13.3653510241641,13.541055915037,13.4195096806019,13.2944731221916,13.1983301819591,13.1537884218875,13.1125467948418,13.1384675907102,13.2390134915731,13.4511160842576,13.8139219043694,14.3241576852257,14.9667556104642,15.7120711674145,16.6545751702108,17.6424558957449,18.2588587216547,18.5796529296663}; // from John Rack-Helleis (Mainz) measurements and corrected with Christian Scharf (Berlin) thesis formula 
  
  G4double pmma_side_en_new[8];
  G4double pmma_bottom_en_new[37];
  for(unsigned int i = 0; i < sizeof(pmma_side_en_new)/sizeof(pmma_side_en_new[0]); i++) pmma_side_en_new[i] = 1240./pmma_side_wl_new[i]*eV;
  for(unsigned int i = 0; i < sizeof(pmma_bottom_en_new)/sizeof(pmma_bottom_en_new[0]); i++) pmma_bottom_en_new[i] = 1240./pmma_bottom_wl_new[i]*eV;

  G4MaterialPropertiesTable *MPT_PMMA_side = new G4MaterialPropertiesTable();
  MPT_PMMA_side->AddProperty("ABSLENGTH", pmma_side_en, pmma_side_abslen, 8, true, true);
  MPT_PMMA_side->AddProperty("RINDEX", pmma_refl_index_en, pmma_rind, pmma_mpt_entr, true, true);
  PMMA_side->SetMaterialPropertiesTable(MPT_PMMA_side);

  G4MaterialPropertiesTable *MPT_PMMA_bottom = new G4MaterialPropertiesTable();
  MPT_PMMA_bottom->AddProperty("RINDEX", pmma_refl_index_en, pmma_rind, pmma_mpt_entr, true, true);
  MPT_PMMA_bottom->AddProperty("ABSLENGTH", pmma_bottom_en, pmma_bottom_abslen, 37);
  PMMA_bottom->SetMaterialPropertiesTable(MPT_PMMA_bottom);


  //------------------------------------------------------------------------------
  //----------------------------- WLS_Coat -----------------------------
  //------------------------------------------------------------------------------
  G4MaterialPropertiesTable *MPT_WLSCoat = new G4MaterialPropertiesTable();
  G4double waveLength3[272] = {560,559,558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,539,538,537,536,535,534,533,532,531,530,529,528,527,526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,510,509,508,507,506,505,504,503,502,501,500,499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,446,445,444,443,442,441,440,439,438,437,436,435,434,433,432,431,430,429,428,427,426,425,424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,406,405,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,388,387,386,385,384,383,382,381,380,379,378,377,376,375,374,373,372,371,370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302,301,300,299,298,297,296,295,294,293,292,291,290,289};
  G4double photonEnergy5[272];
  for(unsigned int i = 0; i < sizeof(photonEnergy5)/sizeof(photonEnergy5[0]); i++) photonEnergy5[i] = 1240./waveLength3[i]*eV;
  G4double absLen3[272] = {1875.34495*mm,1815.34495*mm,1755.34495*mm,1695.34495*mm,1635.34495*mm,1575.34495*mm,1515.34495*mm,1455.34495*mm,1415.34495*mm,1375.34495*mm,1335.34495*mm,1295.34495*mm,1255.34495*mm,1215.34495*mm,1175.34495*mm,1135.34495*mm,1095.34495*mm,1075.34495*mm,1055.34495*mm,1035.34495*mm,1015.34495*mm,995.34495*mm,975.34495*mm,955.34495*mm,935.34495*mm,915.34495*mm,895.34495*mm,875.34495*mm,855.34495*mm,835.34495*mm,815.34495*mm,795.34495*mm,775.34495*mm,755.34495*mm,735.34495*mm,715.34495*mm,695.34495*mm,675.34495*mm,655.34495*mm,635.34495*mm,625.34495*mm,615.34495*mm,605.34495*mm,595.34495*mm,585.34495*mm,575.34495*mm,565.34495*mm,555.34495*mm,545.34495*mm,535.34495*mm,525.34495*mm,515.34495*mm,505.34495*mm,495.34495*mm,485.34495*mm,475.34495*mm,465.34495*mm,455.34495*mm,445.34495*mm,439.34495*mm,433.34495*mm,427.34495*mm,421.34495*mm,415.34495*mm,409.34495*mm,403.34495*mm,397.34495*mm,391.34495*mm,385.34495*mm,379.34495*mm,373.34495*mm,367.34495*mm,361.34495*mm,355.34495*mm,349.34495*mm,343.34495*mm,337.34495*mm,331.34495*mm,325.34495*mm,319.34495*mm,313.34495*mm,307.34495*mm,301.34495*mm,295.34495*mm,289.34495*mm,283.34495*mm,277.34495*mm,271.34495*mm,265.34495*mm,259.34495*mm,253.34495*mm,247.34495*mm,242.84495*mm,238.34495*mm,233.84495*mm,229.34495*mm,224.84495*mm,220.34495*mm,215.84495*mm,211.34495*mm,206.84495*mm,202.34495*mm,197.84495*mm,193.34495*mm,188.84495*mm,184.34495*mm,179.84495*mm,175.34495*mm,170.84495*mm,166.34495*mm,161.84495*mm,157.34495*mm,152.84495*mm,148.34495*mm,143.84495*mm,139.34495*mm,134.84495*mm,130.34495*mm,125.84495*mm,121.34495*mm,116.84495*mm,112.34495*mm,107.84495*mm,103.34495*mm,98.84495*mm,95.34495*mm,91.84495*mm,88.34495*mm,84.84495*mm,81.34495*mm,77.84495*mm,74.34495*mm,70.84495*mm,67.34495*mm,63.84495*mm,60.34495*mm,56.84495*mm,53.34495*mm,49.84495*mm,46.34495*mm,42.84495*mm,39.34495*mm,35.84495*mm,32.34495*mm,28.84495*mm,26.34495*mm,23.84495*mm,21.34495*mm,18.84495*mm,16.34495*mm,13.84495*mm,11.34495*mm,8.84495*mm,6.34495*mm,3.84495*mm,1.34495*mm,0.4858*mm,0.30961*mm,0.21896*mm,0.15935*mm,0.11815*mm,0.08933*mm,0.06919*mm,0.0549*mm,0.04435*mm,0.03637*mm,0.0303*mm,0.02561*mm,0.02199*mm,0.01915*mm,0.0169*mm,0.01509*mm,0.01362*mm,0.01244*mm,0.01145*mm,0.01062*mm,0.00991*mm,0.00931*mm,0.0088*mm,0.00835*mm,0.00795*mm,0.0076*mm,0.00724*mm,0.00695*mm,0.00668*mm,0.00642*mm,0.00618*mm,0.00596*mm,0.00574*mm,0.00554*mm,0.00536*mm,0.00519*mm,0.00503*mm,0.0049*mm,0.00477*mm,0.00466*mm,0.00457*mm,0.0045*mm,0.00443*mm,0.00437*mm,0.00433*mm,0.0043*mm,0.00427*mm,0.00425*mm,0.00423*mm,0.00422*mm,0.00422*mm,0.00421*mm,0.00422*mm,0.00422*mm,0.00423*mm,0.00425*mm,0.00427*mm,0.00429*mm,0.00433*mm,0.00437*mm,0.00442*mm,0.00448*mm,0.00454*mm,0.00462*mm,0.0047*mm,0.00479*mm,0.00489*mm,0.005*mm,0.00512*mm,0.00524*mm,0.00538*mm,0.00552*mm,0.00568*mm,0.00584*mm,0.00601*mm,0.00619*mm,0.00637*mm,0.00654*mm,0.0067*mm,0.00685*mm,0.00697*mm,0.00707*mm,0.00713*mm,0.00717*mm,0.00717*mm,0.00714*mm,0.00708*mm,0.00698*mm,0.00684*mm,0.00667*mm,0.00647*mm,0.00626*mm,0.00602*mm,0.00579*mm,0.00556*mm,0.00535*mm,0.00515*mm,0.00498*mm,0.00484*mm,0.00474*mm,0.00469*mm,0.00469*mm,0.00473*mm,0.00482*mm,0.00497*mm,0.00517*mm,0.00544*mm,0.00584*mm,0.00628*mm,0.00694*mm,0.00779*mm,0.009*mm,0.01068*mm,0.01369*mm,0.01871*mm,0.03013*mm}; //Jakobs measure without BPEA  
  MPT_WLSCoat->AddProperty("WLSABSLENGTH", photonEnergy5, absLen3, 272);  // jakob thesis -- without BPEA 

  // BIS reemission
  G4double waveLength4[51] = {498.50394264782,495.512169509067,489.3462170527,484.343493743363,479.225925762846,472.348366539066,467.849074868481,464.04990973537,461.338683704906,459.793161903923,457.56412302422,454.795680527534,451.768205666593,446.867663596341,441.763591710159,435.933166703427,433.243802562634,431.985904788012,429.963943988042,427.926782673168,426.395623114075,425.126769876294,422.410632741153,420.384395226982,417.93569195544,415.411789507185,413.448584543676,412.387719607238,411.249479281543,409.9604817049,406.3089221806,404.020506020059,401.848223327902,399.264457914078,397.452088829242,394.82668707538,393.620389802785,392.661003458199,390.948731712797,389.702126722733,388.693734027439,388.169942931827,387.606839417529,386.814987134474,386.022324288337,384.176496975521,382.716212740349,381.014431692937,378.83045463701,376.455517150279,373.305908776801};   // ol. the actualy one  
  G4double photonEnergy6[51];
  for(unsigned int i = 0; i < sizeof(photonEnergy6)/sizeof(photonEnergy6[0]); i++) photonEnergy6[i] = 1240./waveLength4[i]*eV;
  G4double reEmit4[51] = {0.095367125872878,0.100714589065125,0.13933792816855,0.176288041362039,0.211928140548633,0.245505005810625,0.273370328546945,0.30221148342213,0.333093045311687,0.364223283871252,0.399221677160171,0.448451857613,0.514706458856799,0.566173063784637,0.587186163465084,0.619912730325973,0.657430320109198,0.6974131402047,0.747799923939089,0.82411878610154,0.886968238152526,0.927207898674191,0.972182090856316,0.995579234732068,0.973067015983444,0.930457495931142,0.880606822664751,0.837907842014882,0.808317266222523,0.778775703403637,0.739211827896116,0.774816618055286,0.818288494562106,0.86029367303487,0.836373519169372,0.783204456572165,0.716723640486035,0.653897573842595,0.600839623111776,0.539529302980934,0.482274276482319,0.45143792246339,0.403951196810372,0.355312021195194,0.308055666198011,0.257497891356571,0.199434040798557,0.131499952640494,0.074850729151259,0.038245233587249,0.007817590412588}; // https://iopscience.iop.org/article/10.1088/1674-1137/39/12/126001/pdf
  //G4double ppckovEmit[8] = {2.95*eV,2.95*eV,2.95*eV,2.95*eV,2.6401*eV,3.0402*eV,3.5403*eV,3.8404*eV}; 
  //G4double rindexWLS[8] = {1.5,1.5,1.5,1.5,1.504,1.505,1.515,1.52};

  MPT_WLSCoat->AddProperty("WLSCOMPONENT", photonEnergy6, reEmit4, 51);
  MPT_WLSCoat->AddConstProperty("WLSTIMECONSTANT", 2.*ns); // More or less it should be this value
  MPT_WLSCoat->AddProperty("RINDEX", pmma_refl_index_en, pmma_rind, pmma_mpt_entr, true, true); //??
  WLS_Coat->SetMaterialPropertiesTable(MPT_WLSCoat);


  //------------------------------------------------------------------------------
  //----------------------------- Air -----------------------------
  //------------------------------------------------------------------------------
  G4double photonEnergy_Air[2] = {2.*eV, 5.*eV};
  G4double refractiveIndex_Air[2] = {1.00, 1.00};
  G4MaterialPropertiesTable* MPT_Air = new G4MaterialPropertiesTable();
  MPT_Air->AddProperty("RINDEX", photonEnergy_Air, refractiveIndex_Air, 2);
  air->SetMaterialPropertiesTable(MPT_Air);
  
  
  //------------------------------------------------------------------------------
  //----------------------------- Silicon Resin  -----------------------------
  //------------------------------------------------------------------------------
  G4double photonEnergy_ResinSi[3] = {2.*eV, 4.*eV, 5.*eV};
  G4double refractiveIndex_ResinSi[3] = {1.57, 1.57, 1.57}; //Hamamatsu data sheet
  G4MaterialPropertiesTable* MPT_ResinSi = new G4MaterialPropertiesTable();
  MPT_ResinSi->AddProperty("RINDEX", photonEnergy_ResinSi, refractiveIndex_ResinSi, 3);
  ResinSi->SetMaterialPropertiesTable(MPT_ResinSi);
  
  
  //------------------------------------------------------------------------------
  //----------------------------- Silicon  -----------------------------
  //------------------------------------------------------------------------------
  G4double photonEnergy_Si[3] = {2.76*eV,2.88*eV,3.10*eV};
  G4double refractiveIndex_Si[3] = {2.59,2.75,2.91}; //from article 2002.04218 
  G4MaterialPropertiesTable* MPT_Si = new G4MaterialPropertiesTable(); 
  MPT_Si->AddProperty("RINDEX", photonEnergy_Si, refractiveIndex_Si, 3);
  Silicon->SetMaterialPropertiesTable(MPT_Si);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::DefineSurfaces()
{
  //------------------------------------------------------------------------------
  //----------------------------- Steel -----------------------------
  //------------------------------------------------------------------------------
  G4OpticalSurface* SteelBoxSurface = new G4OpticalSurface("SteelBoxSurface");
  SteelBoxSurface->SetType(dielectric_metal);
  SteelBoxSurface->SetFinish(ground);
  SteelBoxSurface->SetModel(unified);

  G4double photonEnergy9[2] = {1*eV, 5*eV};

  G4double other_coating[2] = {0, 0}; // it is not relevant in our case, it is for not smooth surfaces 
  G4double specular_Al[2] = {0.0, 0.0};
  G4double total_Al[2] = {0.75, 0.75};

  G4MaterialPropertiesTable *MPTsurf_Steel = new G4MaterialPropertiesTable();
  MPTsurf_Steel->AddProperty("SPECULARSPIKECONSTANT", photonEnergy9, other_coating, 2); //  The diffuse is 1-other three (in this case 1-specular).
  MPTsurf_Steel->AddProperty("BACKSCATTERCONSTANT", photonEnergy9, other_coating, 2);
  MPTsurf_Steel->AddProperty("SPECULARLOBECONSTANT", photonEnergy9, specular_Al, 2);
  MPTsurf_Steel->AddProperty("REFLECTIVITY", photonEnergy9, total_Al, 2);
  SteelBoxSurface->SetMaterialPropertiesTable(MPTsurf_Steel);

  G4LogicalSkinSurface* Surface = new G4LogicalSkinSurface("Steel_Surface", SteelBoxLV, SteelBoxSurface);

   
  //------------------------------------------------------------------------------
  //----------------------------- Absorbent surface SiPMs -----------------------------
  //------------------------------------------------------------------------------
  G4OpticalSurface* sipmSurface = new G4OpticalSurface("sipmSurface");
  sipmSurface->SetType(dielectric_metal);
  sipmSurface->SetFinish(ground);
  sipmSurface->SetModel(unified);
  
  G4double waveLength7[2] = {1000, 100}; 
   
  G4double photonEnergy10[2];
  for(unsigned int i = 0; i < sizeof(photonEnergy10)/sizeof(photonEnergy10[0]); i++) photonEnergy10[i] = 1240./waveLength7[i]*eV;
  G4double abs_sipm[2] = {0, 0}; // we want that the surface of the sipms sides is completely absorbent
       
  G4MaterialPropertiesTable* MTP_sipms = new G4MaterialPropertiesTable();
  MTP_sipms->AddProperty("REFLECTIVITY", photonEnergy10, abs_sipm, 2);

  sipmSurface->SetMaterialPropertiesTable(MTP_sipms); 	
   
  G4LogicalSkinSurface* SurfaceSipm = new G4LogicalSkinSurface("sipm_Surface", sipmSensLV, sipmSurface);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::DefineSolids()
{
  ExpHallBox = new G4Box("World_Box", fExpHall, fExpHall, fExpHall);
  //-------------------------------------------------------------------
  //-------------------------------------------------------------------
  double x = 417.5*mm;

  // Steel box
  std::vector<G4TwoVector> det = {G4TwoVector(-x, -ybl), G4TwoVector(-x, ytl), G4TwoVector(x, ytr), G4TwoVector(x, -ybr), G4TwoVector(-x, -ybl), G4TwoVector(-x, ytl), G4TwoVector(x, ytr), G4TwoVector(x, -ybr)};
  G4GenericTrap* SteelBox = new G4GenericTrap("Steel_Box", SteelZ/2., det);
/*
  // Scintillator box left top
  std::vector<G4TwoVector> scint = 
  {G4TwoVector(-x+WallThick, -ybl+WallThick),
   G4TwoVector(-x+WallThick, ytl-WallThick),
   G4TwoVector(x-WallThick, ytr-WallThick),
   G4TwoVector(x-WallThick, -ybr+WallThick),
   G4TwoVector(-x+WallThick, -ybl+WallThick),
   G4TwoVector(-x+WallThick, ytl-WallThick),
   G4TwoVector(x-WallThick, ytr-WallThick),
   G4TwoVector(x-WallThick, -ybr+WallThick)};
  G4GenericTrap* ScintillatorBox = new G4GenericTrap("Scintillator_Box", SctZ/2., scint);*/

  // Air box
  std::vector<G4TwoVector> air = 
  {G4TwoVector(-x+WallThick, -ybl+WallThick),
   G4TwoVector(-x+WallThick, ytl-WallThick),
   G4TwoVector(x-WallThick, ytr-WallThick),
   G4TwoVector(x-WallThick, -ybr+WallThick),
   G4TwoVector(-x+WallThick, -ybl+WallThick),
   G4TwoVector(-x+WallThick, ytl-WallThick),
   G4TwoVector(x-WallThick, ytr-WallThick),
   G4TwoVector(x-WallThick, -ybr+WallThick)};
  G4GenericTrap* AirBox = new G4GenericTrap("Air_Box", SctZ/2., air);

  double airgap = 2*cm;

  // Scintillator box left top
  std::vector<G4TwoVector> scint = 
  {G4TwoVector(-x+WallThick+airgap, (ybr-ybl)/((x-WallThick)*2)*(x-WallThick-airgap)-((ybl-ybr)/2+ybr-WallThick)),
   G4TwoVector(-x+WallThick+airgap, (ytl-ytr)/((x-WallThick)*2)*(x-WallThick-airgap)+((ytr-ytl)/2+ytl-WallThick)),
   G4TwoVector(x-WallThick, ytr-WallThick),
   G4TwoVector(x-WallThick, -ybr+WallThick),
   G4TwoVector(-x+WallThick+airgap, (ybr-ybl)/((x-WallThick)*2)*(x-WallThick-airgap)-((ybl-ybr)/2+ybr-WallThick)),
   G4TwoVector(-x+WallThick+airgap, (ytl-ytr)/((x-WallThick)*2)*(x-WallThick-airgap)+((ytr-ytl)/2+ytl-WallThick)),
   G4TwoVector(x-WallThick, ytr-WallThick),
   G4TwoVector(x-WallThick, -ybr+WallThick)};
  G4GenericTrap* ScintillatorBox = new G4GenericTrap("Scintillator_Box", SctZ/2., scint);
  
  G4double Rin, Rout;

  // Outer tube
  Rin = Diam_Out_In/2;
  Rout = Diam_Out_Out/2;
  OuterTube  = new G4Tubs("Outer_Tube", Rin, Rout, Length_Out/2, 0, 360*deg);
  // Air gap out
  Rin = Diam_WOM_Out/2 + Thickness_WLS;
  Rout = Diam_Out_In/2;
  AirGapOut  = new G4Tubs("Air_Gap_Out", Rin, Rout, (Length_WOM + Thickness_Gap)/2, 0, 360*deg);
  // WLS tube out
  Rin = Diam_WOM_Out/2;
  Rout = Diam_WOM_Out/2 + Thickness_WLS;
  WLSOut  = new G4Tubs("WLS_Out", Rin, Rout, Length_WOM/2, 0, 360*deg);
  // WOM tube
  Rin = Diam_WOM_In/2;
  Rout = Diam_WOM_Out/2;
  WOMTube  = new G4Tubs("WOM_Tube", Rin, Rout, Length_WOM/2, 0, 360*deg);
  // WLS tube in
  Rin = Diam_WOM_In/2 - Thickness_WLS;
  Rout = Diam_WOM_In/2;
  WLSIn  = new G4Tubs("WLS_In", Rin, Rout, Length_WOM/2, 0, 360*deg);
  // Air gap in
  Rin = Diam_In_Out/2;
  Rout = Diam_WOM_In/2 - Thickness_WLS;
  AirGapIn  = new G4Tubs("Air_Gap_In", Rin, Rout, (Length_WOM + Thickness_Gap)/2, 0, 360*deg);
  // Inner tube
  Rin = Diam_In_In/2;
  Rout = Diam_In_Out/2;
  InnerTube  = new G4Tubs("Inner_Tube", Rin, Rout, Length_In/2, 0, 360*deg);
  // PMMA disk
  Rin = 0.0*mm;
  Rout = Diam_In_Out/2;
  PMMADisk  = new G4Tubs("PMMA_Disk", Rin, Rout, Thickness_Disk/2, 0, 360*deg);
  // PMMA ring
  Rin = Diam_In_In/2;
  Rout = Diam_Out_Out/2;
  PMMARingLower  = new G4Tubs("PMMA_Ring_Lower", Rin, Rout, Thickness_Ring/2, 0, 360*deg);
  // Air ring outer
  Rin = (Diam_WOM_Out - 1*mm)/2;
  Rout = Diam_WOM_Out/2 + Thickness_WLS;
  AirRingOut = new G4Tubs("Air_Ring_Out", Rin, Rout, Thickness_Gap/2, 0, 360*deg);
  // PMMA ring supporting WOM
  Rin = (Diam_WOM_In + 1*mm)/2;
  Rout = (Diam_WOM_Out - 1*mm)/2;
  PMMARing = new G4Tubs("PMMA_Ring", Rin, Rout, Thickness_Gap/2, 0, 360*deg);
  // Air ring inner
  Rin = Diam_WOM_In/2 - Thickness_WLS;
  Rout = (Diam_WOM_In + 1*mm)/2; 
  AirRingIn = new G4Tubs("Air_Ring_In", Rin, Rout, Thickness_Gap/2, 0, 360*deg);
  // Hole in box
  Rin = 0.0*mm;
  Rout = Diam_Out_Out/2; 
  HoleBox  = new G4Tubs("Hole_Box", Rin, Rout, (Length_Out + Thickness_Ring)/2, 0, 360*deg);
  // PMMA "hat"
  Rin = Diam_Out_Out/2;
  Rout = Diam_Hat/2;
  PMMAHat = new G4Tubs("PMMA_Hat", Rin, Rout, Thickness_Hat/2, 0, 360*deg);
  // Additional steel
  Rin = 0.0*mm;
  Rout = Diam_Steel_Add/2;
  G4double y1 = Diam_Steel_Add;
  G4double z1 = Thickness_Steel_Add_Top - Thickness_Steel_Add_Bot;
  G4double y2 = z1/y1*(1/(1+z1/y1));
  G4double z2 = 1-y2;
  G4double overlap = 0.01*mm;
  SteelAdd = new G4CutTubs("Steel_Add", Rin, Rout, Thickness_Steel_Add_Bot/2+z1/4+overlap/2, 0, 360*deg, G4ThreeVector(0, 0, -1), G4ThreeVector(0, -y2, z2));
  // LAB&PPO inside tube
  Rin = 0.0*mm;
  Rout = Diam_In_In/2;
  SctInside = new G4Tubs("Sct_Inside", Rin, Rout, (Length_In + Thickness_Ring)/2, 0, 360*deg);

  //G4SubtractionSolid* EmptySteelBox = new G4SubtractionSolid("Empty_Steel_Box", SteelBox, ScintillatorBox, 0, G4ThreeVector(0, 0, 0));
  G4SubtractionSolid* EmptySteelBox = new G4SubtractionSolid("Empty_Steel_Box", SteelBox, AirBox, 0, G4ThreeVector(0, 0, 0));
  SideAirBox = new G4SubtractionSolid("Side_Air_Box", AirBox, ScintillatorBox, 0, G4ThreeVector(0, 0, 0));
  
  G4double delta_Z_ScintillatorBoxWithHole = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + (Length_Out + Thickness_Ring)/2;
  G4double delta_Z_Steel_Add = SteelZ/2 + Thickness_Steel_Add_Bot/2 + (Thickness_Steel_Add_Top - Thickness_Steel_Add_Bot)/4 - overlap;
  G4double xrot = atan((Thickness_Steel_Add_Top - Thickness_Steel_Add_Bot)/Diam_Steel_Add)*180/pi;
  G4RotationMatrix* RM1 = new G4RotationMatrix(0*deg, 0*deg, 0*deg); RM1->rotateX(xrot*deg);

  std::vector<G4UnionSolid*> EmptySteelBoxWithAdd_tempvec;
  std::vector<G4SubtractionSolid*> EmptySteelBoxWithHole_tempvec;
  std::vector<G4SubtractionSolid*> ScintillatorBoxWithHole_tempvec;

  EmptySteelBoxWithAdd_tempvec.push_back(new G4UnionSolid("Empty_Steel_Box_With_Add_0", EmptySteelBox, SteelAdd, 0, G4ThreeVector(WOM_coord_vec[0].first, WOM_coord_vec[0].second, delta_Z_Steel_Add)));
  EmptySteelBoxWithAdd_tempvec.push_back(new G4UnionSolid("Empty_Steel_Box_With_Add_1", EmptySteelBoxWithAdd_tempvec.back(), SteelAdd, 0, G4ThreeVector(WOM_coord_vec[1].first, WOM_coord_vec[1].second, delta_Z_Steel_Add)));

  for(unsigned int pos = 0; pos<WOM_coord_vec.size(); pos++) {
    G4Transform3D t_SteelHole = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_ScintillatorBoxWithHole-SteelZ/2-Thickness_Steel_Add_Bot);
    if(pos == 0) {
      EmptySteelBoxWithHole_tempvec.push_back(new G4SubtractionSolid("Empty_Steel_Box_With_Hole_0", EmptySteelBoxWithAdd_tempvec.back(), HoleBox, t_SteelHole));
      ScintillatorBoxWithHole_tempvec.push_back(new G4SubtractionSolid("Scintillator_Box_With_Hole_0", ScintillatorBox, HoleBox, t_SteelHole));
    }
    else {
      EmptySteelBoxWithHole_tempvec.push_back(new G4SubtractionSolid("Empty_Steel_Box_With_Hole_1", EmptySteelBoxWithHole_tempvec.back(), HoleBox, t_SteelHole));
      ScintillatorBoxWithHole_tempvec.push_back(new G4SubtractionSolid("Scintillator_Box_With_Hole_1", ScintillatorBoxWithHole_tempvec.back(), HoleBox, t_SteelHole));
    }
  }
  EmptySteelBoxWithHole = EmptySteelBoxWithHole_tempvec.back();
  //ScintillatorBoxWithHole = ScintillatorBoxWithHole_tempvec.back();
  ScintillatorBoxWithHole = new G4SubtractionSolid("Scintillator_Box_With_Hole_2", ScintillatorBoxWithHole_tempvec.back(), EmptySteelBox, 0, G4ThreeVector(0, 0, 0));
 
  sipmBox = new G4Box("sipm_Box", Length_sipm_box/2, Length_sipm_box/2, Length_sipm_box/2);
 
  // SIPMs 14161 - 3050HS
  sipmHole = new G4Box("sipm_Hole", sipmSizeSens/2., sipmSizeSens/2., (sipmSensThickness + sipmSensThicknessTop)/2);
  sipmSensTop = new G4Box("sipm_Sens_Top", sipmSizeSens/2., sipmSizeSens/2., sipmSensThicknessTop/2.);
  sipmSens = new G4Box("sipm_Sens", sipmSizeSens/2., sipmSizeSens/2., sipmSensThickness/2.);
  sipmWindowAll = new G4Box("sipm_All", sipmSize/2., sipmSize/2., sipmWindowThickness);
  sipmWindow = new G4SubtractionSolid("sipm_Window", sipmWindowAll, sipmHole, 0, G4ThreeVector(0, 0, (sipmSensThickness + sipmSensThicknessTop)/2)); 
  sipmBaseBox = new G4Box("sipm_Base", sipmSize/2., sipmSize/2., sipmBaseThickness/2.);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::DefineLogicalVolumes()
{
  ExpHallLV = new G4LogicalVolume(ExpHallBox, air, "World_LV", 0, 0, 0);
  ScintillatorBoxLV = new G4LogicalVolume(ScintillatorBoxWithHole, LAB_PPO, "Scintillator_Box_LV", 0, 0, 0);
  SteelBoxLV = new G4LogicalVolume(EmptySteelBoxWithHole, Al, "Steel_Box_LV", 0, 0, 0);
  AirBoxLV = new G4LogicalVolume(SideAirBox, air, "Air_Box_LV", 0, 0, 0);
  OuterTubeLV = new G4LogicalVolume(OuterTube, PMMA_side, "Outer_Tube_LV");
  WOMTubeLV = new G4LogicalVolume(WOMTube, PMMA_bottom, "WOM_Tube_LV");
  InnerTubeLV = new G4LogicalVolume(InnerTube, PMMA_side, "Inner_Tube_LV");
  PMMARingLowerLV = new G4LogicalVolume(PMMARingLower, PMMA_bottom, "PMMA_Ring_Lower_LV");
  PMMADiskLV = new G4LogicalVolume(PMMADisk, PMMA_side, "PMMA_Disk_LV");
  AirGapOutLV = new G4LogicalVolume(AirGapOut, air, "Air_Gap_Out_LV");
  AirGapInLV = new G4LogicalVolume(AirGapIn, air, "Air_Gap_In_LV");
  WLSOutLV = new G4LogicalVolume(WLSOut, WLS_Coat, "WLS_Out_LV");
  WLSInLV = new G4LogicalVolume(WLSIn, WLS_Coat, "WLS_In_LV");
  PMMAHatLV = new G4LogicalVolume(PMMAHat, PMMA_side, "PMMA_Hat_LV");
  AirRingOutLV = new G4LogicalVolume(AirRingOut, air, "Air_Ring_Out_LV");
  AirRingInLV = new G4LogicalVolume(AirRingIn, air, "Air_Ring_In_LV");
  PMMARingLV = new G4LogicalVolume(PMMARing, PMMA_bottom, "PMMA_Ring_LV");
  SctInsideLV = new G4LogicalVolume(SctInside, LAB_PPO, "Sct_Inside_LV");
  sipmSensLV = new G4LogicalVolume(sipmSens, Silicon, "sipm_Sens_LV");
  sipmSensTopLV = new G4LogicalVolume(sipmSensTop, Silicon, "sipm_Sens_Top_LV");
  sipmWindowLV = new G4LogicalVolume(sipmWindow, ResinSi, "sipm_Window_LV");
  sipmBaseBoxLV = new G4LogicalVolume(sipmBaseBox, Al, "sipm_Base_Box_LV");
  sipmBoxLV = new G4LogicalVolume(sipmBox, Al, "sipm_Box_LV");
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::ConstructVolumes()
{
  ExpHallPV = new G4PVPlacement(0, G4ThreeVector(), ExpHallLV, "World_PV", 0, false, 999);

  G4double xrot = atan((Thickness_Steel_Add_Top - Thickness_Steel_Add_Bot)/Diam_Steel_Add)*180/pi;
  G4RotationMatrix* RM1 = new G4RotationMatrix(0*deg, 0*deg, 0*deg); RM1->rotateX(xrot*deg); 

  SteelBoxPV = new G4PVPlacement(0, G4ThreeVector(), SteelBoxLV, "Steel_Box_PV", ExpHallLV, false, 100, intersect_check);
  ScintillatorBoxPV = new G4PVPlacement(0, G4ThreeVector(), ScintillatorBoxLV, "Scintillator_Box_PV", ExpHallLV, false, 200, intersect_check);
  AirBoxPV = new G4PVPlacement(0, G4ThreeVector(), AirBoxLV, "Air_Box_PV", ExpHallLV, false, 1000, intersect_check);

  // PMMA Staff
  // Outer tube
  G4double delta_Z_Outer_tube = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Length_Out/2 + Thickness_Ring;
  // Air gap
  G4double delta_Z_Air_gap = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Length_WOM/2 + Thickness_Ring + Thickness_Gap/2;
  // WOM tube
  G4double delta_Z_WOM = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Length_WOM/2 + Thickness_Ring + Thickness_Gap;
  // Inner tube
  G4double delta_Z_Inner_tube = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Length_In/2 + Thickness_Ring;
  // PMMA Ring
  G4double delta_Z_PMMA_Ring = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Thickness_Ring/2;
  // PMMA Disk
  G4double delta_Z_PMMA_Disk = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Length_In + Thickness_Ring + Thickness_Disk/2;
  // PMMA Hat
  G4double delta_Z_PMMA_Hat = SteelZ/2 + Thickness_Steel_Add_Bot + Thickness_Hat/2;
  // LAB&PPO inside tube
  G4double delta_Z_Sct_Inside = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + (Length_In + Thickness_Ring)/2;
  // Air ring
  G4double delta_Z_upper_ring = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Thickness_Ring + Thickness_Gap/2;

  G4int n_sipm = 40;
  G4double radius_sipm = (Diam_WOM_In + Diam_WOM_Out)/4.;
  G4int wom_id = 1;
  G4int sipm_id = 0;

  for(unsigned int pos = 0; pos < WOM_coord_vec.size(); pos++) {
    G4Transform3D t_OuterTube = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_Outer_tube-SteelZ/2-Thickness_Steel_Add_Bot);
    OuterTubePV_vect.push_back(new G4PVPlacement(t_OuterTube, OuterTubeLV, "Outer_Tube_PV", ExpHallLV, false, 300, intersect_check));
    G4Transform3D t_WOMTube = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_WOM-SteelZ/2-Thickness_Steel_Add_Bot);
    WOMTubePV_vect.push_back(new G4PVPlacement(t_WOMTube, WOMTubeLV, "WOM_Tube_PV", ExpHallLV, false, 400, intersect_check));
    G4Transform3D t_InnerTube = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_Inner_tube-SteelZ/2-Thickness_Steel_Add_Bot);
    InnerTubePV_vect.push_back(new G4PVPlacement(t_InnerTube, InnerTubeLV, "Inner_Tube_PV", ExpHallLV, false, 301, intersect_check));
    G4Transform3D t_PMMARingLower = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_PMMA_Ring-SteelZ/2-Thickness_Steel_Add_Bot);
    PMMARingLowerPV_vect.push_back(new G4PVPlacement(t_PMMARingLower, PMMARingLowerLV, "PMMA_Ring_Lower_PV", ExpHallLV, false, 302, intersect_check));
    G4Transform3D t_PMMADisk = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_PMMA_Disk-SteelZ/2-Thickness_Steel_Add_Bot);
    PMMADiskPV_vect.push_back(new G4PVPlacement(t_PMMADisk, PMMADiskLV, "PMMA_Disk_PV", ExpHallLV, false, 303, intersect_check));
    G4Transform3D t_AirGap = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_Air_gap-SteelZ/2-Thickness_Steel_Add_Bot);
    AirGapOutPV_vect.push_back(new G4PVPlacement(t_AirGap, AirGapOutLV, "Air_Gap_Out_PV", ExpHallLV, false, 500, intersect_check));
    AirGapInPV_vect.push_back(new G4PVPlacement(t_AirGap, AirGapInLV, "Air_Gap_In_PV", ExpHallLV, false, 501, intersect_check));
    WLSOutPV_vect.push_back(new G4PVPlacement(t_WOMTube, WLSOutLV, "WLS_Out_PV", ExpHallLV, false, 600, intersect_check));
    WLSInPV_vect.push_back(new G4PVPlacement(t_WOMTube, WLSInLV, "WLS_In_PV", ExpHallLV, false, 601, intersect_check));
    G4Transform3D t_PMMAHat = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_PMMA_Hat-SteelZ/2-Thickness_Steel_Add_Bot);
    PMMAHatPV_vect.push_back(new G4PVPlacement(t_PMMAHat, PMMAHatLV, "PMMA_Hat_PV", ExpHallLV, false, 304, intersect_check));
    G4Transform3D t_AirRing = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_upper_ring-SteelZ/2-Thickness_Steel_Add_Bot);
    AirRingOutPV_vect.push_back(new G4PVPlacement(t_AirRing, AirRingOutLV, "Air_Ring_Out_PV", ExpHallLV, false, 502, intersect_check));
    AirRingInPV_vect.push_back(new G4PVPlacement(t_AirRing, AirRingInLV, "Air_Ring_In_PV", ExpHallLV, false, 503, intersect_check));
    PMMARingPV_vect.push_back(new G4PVPlacement(t_AirRing, PMMARingLV, "PMMA_Ring_PV", ExpHallLV, false, 305, intersect_check));
    G4Transform3D t_SctInside = G4Translate3D(WOM_coord_vec[pos].first,WOM_coord_vec[pos].second-Diam_Steel_Add/2,SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0,Diam_Steel_Add/2,delta_Z_Sct_Inside-SteelZ/2-Thickness_Steel_Add_Bot);
    SctInsidePV_vect.push_back(new G4PVPlacement(t_SctInside, SctInsideLV, "Sct_Inside_PV", ExpHallLV, false, 201, intersect_check));
    if(pos == 0) { for(int i = 0; i < n_sipm; i++) {
      G4RotationMatrix* RM2 = new G4RotationMatrix();
      RM2->rotateZ(-(i+0.5)*360./n_sipm*deg);
      G4double Xrotation = radius_sipm*std::cos((i + 0.5)*2*pi/n_sipm);
      G4double Yrotation = radius_sipm*std::sin((i + 0.5)*2*pi/n_sipm);
      sipmSensPV_vect.push_back(new G4PVPlacement(RM2, G4ThreeVector(Xrotation, Yrotation, -Length_sipm_box/2+sipmWindowThickness+sipmSensThicknessTop+sipmSensThickness/2), sipmSensLV, "sipm_Sens_PV", sipmBoxLV, false, sipm_id++, intersect_check));
      sipmSensTopPV = new G4PVPlacement(RM2, G4ThreeVector(Xrotation, Yrotation, -Length_sipm_box/2+sipmWindowThickness+sipmSensThicknessTop/2), sipmSensTopLV, "sipm_Sens_Top_PV", sipmBoxLV, false, 701, intersect_check);
      sipmWindowPV = new G4PVPlacement(RM2, G4ThreeVector(Xrotation, Yrotation, -Length_sipm_box/2+sipmWindowThickness), sipmWindowLV, "sipm_Window_PV", sipmBoxLV, false, 700, intersect_check);
      sipmBasePV = new G4PVPlacement(RM2, G4ThreeVector(Xrotation, Yrotation, -Length_sipm_box/2+sipmWindowThickness+sipmWindowThickness+sipmBaseThickness/2), sipmBaseBoxLV, "sipm_Base_PV", sipmBoxLV, false, 702, intersect_check);
    } }
    G4Transform3D t_sipmBox = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_WOM+Length_WOM/2+Length_sipm_box/2-SteelZ/2-Thickness_Steel_Add_Bot);
    sipmBoxPV_vect.push_back(new G4PVPlacement(t_sipmBox, sipmBoxLV, "sipm_Box_PV", ExpHallLV, false, wom_id++, intersect_check));
  }
}

void OpNoviceDetectorConstruction::DefineVisAttributes()
{
  grey        = G4Color(0.3, 0.3, 0.3, 0.2);
  blue        = G4Color(0.0, 0.0, 1.0, 0.3);
  green       = G4Color(0.0, 1.0, 0.0, 0.2);
  red         = G4Color(1.0, 0.0, 0.0, 0.2);
  white       = G4Color(1.0, 1.0, 1.0, 0.2);
  cyan        = G4Color(0.0, 1.0, 1.0, 0.3);
  magenta     = G4Color(1.0, 0.0, 1.0, 0.3);
  yellow      = G4Color(1.0, 1.0, 0.0, 0.3);

  G4VisAttributes *worldVisAtt = new G4VisAttributes;
  worldVisAtt->SetVisibility(false);
  worldVisAtt->SetColor(blue);
  ExpHallLV->SetVisAttributes(worldVisAtt);
  sipmBoxLV->SetVisAttributes(worldVisAtt);
  
  G4VisAttributes *steelBoxVisAtt = new G4VisAttributes;
  steelBoxVisAtt->SetVisibility(true);
  steelBoxVisAtt->SetColor(white);
  SteelBoxLV->SetVisAttributes(steelBoxVisAtt);

  G4VisAttributes *sctBoxVisAtt = new G4VisAttributes;
  sctBoxVisAtt->SetColor(blue);
  sctBoxVisAtt->SetVisibility(true);
  ScintillatorBoxLV->SetVisAttributes(sctBoxVisAtt);
  G4VisAttributes *sctBoxVisAtt1 = new G4VisAttributes;
  sctBoxVisAtt1->SetColor(blue);
  sctBoxVisAtt1->SetVisibility(true);
  SctInsideLV->SetVisAttributes(sctBoxVisAtt1);

  G4VisAttributes *PMMAVisAtt = new G4VisAttributes;
  PMMAVisAtt->SetVisibility(true);
  PMMAVisAtt->SetColor(grey);
  PMMADiskLV->SetVisAttributes(PMMAVisAtt);
  PMMARingLowerLV->SetVisAttributes(PMMAVisAtt);
  PMMAHatLV->SetVisAttributes(PMMAVisAtt);
  OuterTubeLV->SetVisAttributes(PMMAVisAtt);
  InnerTubeLV->SetVisAttributes(PMMAVisAtt);
  PMMARingLV->SetVisAttributes(PMMAVisAtt);

  G4VisAttributes *airVisAtt = new G4VisAttributes;
  airVisAtt->SetColor(green);
  airVisAtt->SetVisibility(false);
  AirGapOutLV->SetVisAttributes(airVisAtt);
  AirGapInLV->SetVisAttributes(airVisAtt);
  AirRingOutLV->SetVisAttributes(airVisAtt);
  AirRingInLV->SetVisAttributes(airVisAtt);

  G4VisAttributes *WLSVisAtt = new G4VisAttributes;
  WLSVisAtt->SetColor(red);
  WLSVisAtt->SetVisibility(false);
  WLSOutLV->SetVisAttributes(WLSVisAtt);
  WLSInLV->SetVisAttributes(WLSVisAtt);

  G4VisAttributes *WOMVisAtt = new G4VisAttributes;
  WOMVisAtt->SetColor(magenta);
  WOMVisAtt->SetVisibility(true);
  WOMTubeLV->SetVisAttributes(WOMVisAtt);

  G4VisAttributes *sipmVisAtt1 = new G4VisAttributes;
  sipmVisAtt1->SetColor(cyan);
  sipmVisAtt1->SetVisibility(false);
  sipmWindowLV->SetVisAttributes(sipmVisAtt1);
  G4VisAttributes *sipmVisAtt2 = new G4VisAttributes;
  sipmVisAtt2->SetColor(cyan);
  sipmVisAtt2->SetVisibility(false);
  sipmBaseBoxLV->SetVisAttributes(sipmVisAtt2);
  G4VisAttributes *sipmVisAtt3 = new G4VisAttributes;
  sipmVisAtt3->SetColor(cyan);
  sipmVisAtt3->SetVisibility(false);
  sipmSensLV->SetVisAttributes(sipmVisAtt3);
  G4VisAttributes *sipmVisAtt4 = new G4VisAttributes;
  sipmVisAtt4->SetColor(cyan);
  sipmVisAtt4->SetVisibility(true);
  sipmSensTopLV->SetVisAttributes(sipmVisAtt4);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* OpNoviceDetectorConstruction::Construct()
{
  intersect_check = true; // global intersection check
  DefineMaterials();
  DefineMPTs();
  DefineSolids();
  DefineLogicalVolumes();
  ConstructVolumes();
  DefineSurfaces();
  DefineVisAttributes();
  return ExpHallPV;
}
