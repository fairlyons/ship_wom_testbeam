// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
//
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#include "OpNoviceDetectorConstruction.hh"
#include "G4Material.hh"
#include "G4Element.hh"

#include "G4NistManager.hh"
#include "G4LogicalBorderSurface.hh"
#include "G4LogicalSkinSurface.hh"
#include "G4OpticalSurface.hh"

#include "G4RunManager.hh"
#include "G4LogicalVolume.hh"
#include "G4ThreeVector.hh"
#include "G4PVPlacement.hh"
#include "G4SystemOfUnits.hh"
#include "G4GeometryManager.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4SDManager.hh"
#include "G4MultiFunctionalDetector.hh"
#include "G4VPrimitiveScorer.hh"
#include "G4PSEnergyDeposit.hh"
#include "G4PSTrackLength.hh"
#include "G4PSNofStep.hh"
#include "G4SDParticleFilter.hh"
#include "G4UnionSolid.hh"
#include "G4PhysicalConstants.hh"
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

OpNoviceDetectorConstruction::OpNoviceDetectorConstruction()
 : G4VUserDetectorConstruction()
{
  fExpHall = 5*m;

  sipmSize = 3.4*mm;
  sipmSizeSens = 3*mm;
  sipmBaseThickness = 1.*mm;
  sipmWindowThickness =  0.15*mm;
  sipmSensThickness = 0.149*mm;
  sipmSensThicknessTop = 0.001*mm;

  SteelZ = 21*cm;
  WallThick = 5*mm;
  SctZ = SteelZ - WallThick*2;

  Diam_In_In = 44*mm;
  Diam_In_Out = 50*mm;
  Diam_Out_In = 64*mm;
  Diam_Out_Out = 70*mm;
  Diam_WOM_In = 54*mm;
  Diam_WOM_Out = 60*mm;
  Diam_Steel_Add = 120*mm;
  Diam_Hat = 120*mm;
  Thickness_Disk = 3*mm;
  Thickness_Ring = 3*mm;
  Thickness_Hat = 5*mm;
  Thickness_WLS = 0.02*mm;
  Thickness_Gap = 1*mm;
  Thickness_Steel_Add_Top = 16.19*mm - Thickness_Hat;
  Thickness_Steel_Add_Bot = 12*mm - Thickness_Hat;
  Length_Out = 200*mm;
  Length_WOM = 205*mm;
  Length_In = 195*mm;
  Length_sipm_box = 15*cm;

  ytl = 644.396;
  ytr = 590.790;
  ybl = 601.561;
  ybr = 633.625;
  double ytm = (ytl+ytr)/2;
  double ybm = (ybl+ybr)/2;
  double height = ytm+ybm;
  double womy = height/4;
  WOM_coord_vec = {{0*mm, womy*mm}, {0*mm, -womy*mm}};
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

OpNoviceDetectorConstruction::~OpNoviceDetectorConstruction()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::DefineMaterials()
{
  G4NistManager* nist = G4NistManager::Instance();

  steel = nist->FindOrBuildMaterial("G4_STAINLESS-STEEL");
  
  Silicon = nist->FindOrBuildMaterial("G4_Si");
  Al = nist->FindOrBuildMaterial("G4_Al");
  
  G4double a, z, density;
  G4int nelements, ncomponent, natoms;

  // Air
  G4Element* N = new G4Element("Nitrogen","N", z = 7, a = 14.01*g/mole);
  G4Element* O = new G4Element("Oxygen","O", z = 8, a = 16.00*g/mole);

  air = new G4Material("Air", density = 1.29*mg/cm3, nelements = 2);
  air->AddElement(N, 70.*perCent);
  air->AddElement(O, 30.*perCent);

  // Linear alkyl benzene (LAB)
  G4Element* H = new G4Element("Hydrogen", "H", 1, 1.01*g/mole);
  G4Element* C = new G4Element("Carbon", "C", 6, 12.01*g/mole);
  G4Material* LAB = new G4Material("LAB", density = 0.856*g/cm3, ncomponent = 2);  //density: https://www.knowde.com/stores/sasol/documents/101895
  LAB->AddElement(H, natoms = 28);
  LAB->AddElement(C, natoms = 17);
  // Diphenyloxazole (PPO)
  G4Material* PPO = new G4Material("PPO", density = 1.128*g/cm3, ncomponent = 4); // density: https://www.echemi.com/sds/24-diphenyloxazole-pid_Rock24446.html
  PPO->AddElement(H, natoms = 11);
  PPO->AddElement(C, natoms = 15);
  PPO->AddElement(N, natoms = 1);
  PPO->AddElement(O, natoms = 1);
  // Scintillator (LAB+PPO) 23233 cm^3 23.233 l
  LAB_PPO = new G4Material("LAB_PPO", density = 0.9*g/cm3, ncomponent = 2); //??
  LAB_PPO->AddMaterial(LAB, 99.77*perCent); //Calculated considering  be 2 g/L of PPO (First measurement of the surface tension of a liquid scintillator based on Linear Alkylbenzene (HYBLENE 113)). 2g of PPO every liter of LAB
  LAB_PPO->AddMaterial(PPO, 0.23*perCent);
  // Bis-MSB WLS
  Bis_MSB = new G4Material("Bis_MSB", density = 1.076*g/cm3, ncomponent = 2); // density: http://www.molbase.com/moldata/368101.html
  Bis_MSB->AddElement(H, natoms = 22);
  Bis_MSB->AddElement(C, natoms = 24);
  // PEMA to build the WLS dye coat  
  PEMA = new G4Material("PEMA", density = 1.11*g/cm3, ncomponent = 3); // density: https://polymerdatabase.com/polymers/polyethylmethacrylate.html
  PEMA->AddElement(H, natoms = 10);
  PEMA->AddElement(C, natoms = 6);
  PEMA->AddElement(O, natoms = 242);
  // PTP (para-Terphenyl) to build the scintillator C18H14 and the dye coat
  PTP = new G4Material("PTP", density = 1.23*g/cm3, ncomponent = 2); //  density: https://m.molbase.com/moldata/64879.html   
  PTP->AddElement(H, natoms = 14);
  PTP->AddElement(C, natoms = 18);
  /// WLS Coating  (150g PEMA, 3g PTP 1.5g bis-MSB)
  WLS_Coat = new G4Material("WLSCoat", density = 1.1*g/cm3, ncomponent = 3); // density: same as PEMA 
  WLS_Coat->AddMaterial(Bis_MSB, 0.97*perCent);
  WLS_Coat->AddMaterial(PTP, 1.94*perCent);
  WLS_Coat->AddMaterial(PEMA, 97.09*perCent);
  // PMMA side
  PMMA_side = new G4Material("PMMA_side", density = 1.200*g/cm3, ncomponent = 2);
  PMMA_side->AddElement(H, natoms = 2);
  PMMA_side->AddElement(C, natoms = 4);
  // PMMA bottom
  PMMA_bottom = new G4Material("PMMA_bottom", density = 1.200*g/cm3, ncomponent = 2);
  PMMA_bottom->AddElement(H, natoms = 2);
  PMMA_bottom->AddElement(C, natoms = 4);
  // Silicone resin
  G4Element* Si = new G4Element("Silicon", "Si", 14, 28.0855*g/mole);
  ResinSi = new G4Material("ResinSi", density = 3*g/cm3, ncomponent=2); 
  ResinSi->AddElement(Si,natoms=1);
  ResinSi->AddElement(O,natoms=4);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::DefineMPTs()
{
  //------------------------------------------------------------------------------
  //----------------------------- LAB_PPO -----------------------------
  //------------------------------------------------------------------------------
  G4double rindex_LAB_PPO[100];
  G4double photon_en_LAB_PPO[100];
  auto Ridndex_LAB_PPO = [=](G4double wl) {
    G4double rind = 1.;
    G4double B[4], C[4];
    B[0] = 0.821384; C[0] = 94.7625;
    B[1] = 0.311375; C[1] = 160.751;
    B[2] = 0.0170099; C[2] = 219.575;
    B[3] = 0.608268; C[3] = 9385.54;
    for(int term = 0; term < 4; term++) rind += B[term]/(1.-(C[term]/wl)*(C[term]/wl)); //formula eand coefficients: https://arxiv.org/pdf/1105.2101.pdf
    return sqrt(rind);
  };

  G4double wl;
  for(unsigned int i = 0; i < sizeof(photon_en_LAB_PPO)/sizeof(photon_en_LAB_PPO[0]); i++) {
    wl = 745. - 5.*i;
    photon_en_LAB_PPO[i] = 1240./wl*eV;
    rindex_LAB_PPO[i] = Ridndex_LAB_PPO(wl);
  }
  G4MaterialPropertiesTable *MPT_LAB_PPO = new G4MaterialPropertiesTable();
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONYIELD",10800./MeV); // https://underground.physics.berkeley.edu/WbLS/slides/PennRnD-Grullon.pdf
  MPT_LAB_PPO->AddProperty("RINDEX", photon_en_LAB_PPO, rindex_LAB_PPO, 100);//->SetSpline(true);

  // emission
  G4double photonWaveLength3[201] = {500,499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,446,445,444,443,442,441,440,439,438,437,436,435,434,433,432,431,430,429,428,427,426,425,424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,406,405,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,388,387,386,385,384,383,382,381,380,379,378,377,376,375,374,373,372,371,370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302,301,300};
  G4double photon_en_LAB_PPO_2[201];
  for(unsigned int i = 0; i < sizeof(photonWaveLength3)/sizeof(photonWaveLength3[0]); i++) photon_en_LAB_PPO_2[i] = 1240./photonWaveLength3[i]*eV;

  G4double scintilFast_LAB_PPO[201] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0025,0.005,0.0075,0.01,0.0125,0.015,0.0175,0.02,0.0225,0.025,0.025,0.025,0.025,0.025,0.025,0.025,0.025,0.025,0.025,0.025,0.0275,0.03,0.0325,0.035,0.0375,0.04,0.0425,0.045,0.0475,0.05,0.0525,0.055,0.0575,0.06,0.0625,0.065,0.0675,0.07,0.0725,0.075,0.08,0.085,0.09,0.095,0.1,0.105,0.11,0.115,0.12,0.125,0.1325,0.14,0.1475,0.155,0.1625,0.17,0.1775,0.185,0.1925,0.2,0.2075,0.215,0.2225,0.23,0.2375,0.245,0.2525,0.26,0.2675,0.275,0.29,0.305,0.32,0.335,0.35,0.365,0.38,0.395,0.41,0.425,0.4325,0.44,0.4475,0.455,0.4625,0.47,0.4775,0.485,0.4925,0.5,0.53,0.56,0.59,0.62,0.65,0.68,0.71,0.74,0.77,0.8,0.795,0.79,0.785,0.78,0.775,0.77,0.765,0.76,0.755,0.75,0.77,0.79,0.81,0.83,0.85,0.87,0.89,0.91,0.93,0.95,0.9,0.85,0.8,0.75,0.7,0.65,0.6,0.55,0.5,0.45,0.405,0.36,0.315,0.27,0.225,0.18,0.135,0.09,0.045,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}; //https://arxiv.org/abs/1001.3946 
  MPT_LAB_PPO->AddProperty("SCINTILLATIONCOMPONENT1", photon_en_LAB_PPO_2, scintilFast_LAB_PPO, 201, false, true);
  MPT_LAB_PPO->AddProperty("SCINTILLATIONCOMPONENT2", photon_en_LAB_PPO_2, scintilFast_LAB_PPO, 201, false, true);

  // transmission
  G4double waveLength[151] = {600,598,596,594,592,590,588,586,584,582,580,578,576,574,572,570,568,566,564,562,560,558,556,554,552,550,548,546,544,542,540,538,536,534,532,530,528,526,524,522,520,518,516,514,512,510,508,506,504,502,500,498,496,494,492,490,488,486,484,482,480,478,476,474,472,470,468,466,464,462,460,458,456,454,452,450,448,446,444,442,440,438,436,434,432,430,428,426,424,422,420,418,416,414,412,410,408,406,404,402,400,398,396,394,392,390,388,386,384,382,380,378,376,374,372,370,368,366,364,362,360,358,356,354,352,350,348,346,344,342,340,338,336,334,332,330,328,326,324,322,320,318,316,314,312,310,308,306,304,302,300};
  G4double photon_en_LAB_PPO_3[151];
  for(unsigned int i = 0; i < sizeof(waveLength)/sizeof(waveLength[0]); i++) photon_en_LAB_PPO_3[i] = 1240./waveLength[i]*eV;

  G4double waveLength_April2024[399] = {698.999999984782,697.999999986071,696.999999987067,695.999999987776,694.99999998883,693.999999989326,692.999999990191,691.999999991251,690.999999991541,689.999999992372,688.999999993845,687.999999994745,686.999999995409,685.999999996042,684.999999996163,683.999999996778,682.999999997219,681.999999997546,680.9999999977,679.99999999854,678.999999998675,677.999999998766,676.999999999363,675.999999999623,675.000000000071,674.000000000256,673.000000000505,672.000000000766,671.000000000837,670.000000001074,669.000000000934,668.000000001159,667.000000001179,666.000000001109,665.000000000818,664.000000000634,663.000000000429,661.999999999936,660.99999999948,659.999999998623,658.999999997544,657.999999996836,656.999999995476,655.999999993765,654.999999992251,653.999999990548,652.999999989075,651.999999987723,650.999999986163,649.999999985316,648.999999984689,647.999999984429,646.999999984579,645.999999984726,644.999999985286,643.999999985799,642.999999986275,641.999999986727,640.999999987035,639.999999986917,638.999999987339,637.999999987155,636.999999987343,635.999999987521,634.999999987953,633.99999998867,632.999999989788,631.999999990867,630.999999992058,629.999999993125,628.999999994127,627.999999994937,626.99999999596,625.999999996696,624.999999997456,623.999999997915,622.99999999849,621.999999999069,620.999999999148,619.999999999532,618.999999999821,617.999999999892,616.999999999592,615.999999999589,614.999999998967,613.999999998416,612.999999997615,611.999999996684,610.999999995633,609.999999994626,608.999999993708,607.9999999931,606.999999992751,605.999999992809,604.999999993296,603.99999999409,602.999999994897,601.999999995576,600.999999996273,599.999999997057,598.999999997456,597.999999997922,596.999999998453,595.999999998793,594.999999999197,593.999999999266,592.999999999429,591.99999999957,590.999999999659,589.999999999772,588.999999999832,587.999999999793,586.999999999957,585.999999999751,584.999999999854,584.00000000001,583.000000000018,582.000000000115,580.999999999876,579.999999999671,578.999999999629,577.99999999936,576.999999999201,575.99999999869,574.999999998323,573.99999999813,572.99999999764,571.999999997422,570.999999997368,569.999999997029,568.999999996892,567.999999996947,566.99999999687,565.999999996682,564.999999996696,563.999999996733,562.999999996714,561.999999996597,560.999999995781,559.99999999481,558.999999994815,557.999999994901,556.999999995018,555.999999995003,554.999999994996,553.999999995024,552.99999999537,551.999999995438,550.999999995499,549.999999995742,548.999999995943,547.999999995967,546.999999995993,545.999999995925,544.999999995968,543.999999996086,542.999999996176,541.999999996266,540.999999996369,539.999999996389,538.999999996376,537.999999996144,536.999999995926,535.999999995756,534.999999995543,533.999999995179,532.999999995005,531.999999995021,530.999999994881,529.999999994798,528.99999999489,527.999999994972,526.999999995164,525.999999995286,524.999999995334,523.999999995395,522.999999995343,521.999999995382,520.999999995259,519.999999994966,518.999999994926,517.999999994527,516.999999994211,515.999999994008,514.99999999373,513.999999993516,512.999999993066,511.999999992631,510.999999992268,509.999999991986,508.99999999162,507.999999991123,506.999999990578,505.999999990263,504.999999989998,503.999999989623,502.999999989314,501.999999988905,500.999999988817,499.999999988348,498.99999998819,497.999999987978,496.999999987726,495.999999987377,494.999999987193,493.999999987122,492.999999986823,491.999999986809,490.999999986636,489.999999986322,488.999999986394,487.999999986178,486.999999986103,485.999999985929,484.99999998577,483.999999985651,482.99999998576,481.999999985829,480.999999985957,479.999999986045,478.999999986095,477.999999986097,476.999999985844,475.999999985481,474.999999985137,473.999999984684,472.999999984472,471.999999984152,470.99999998399,469.999999983645,468.999999983347,467.999999983067,466.999999982577,465.999999982179,464.999999981963,463.999999981657,462.999999981138,461.999999980859,460.999999980395,459.999999980124,458.999999979794,457.999999979295,456.999999978751,455.99999997832,454.99999997801,453.999999977563,452.999999976949,451.999999976625,450.999999976125,449.999999975469,448.999999975166,447.999999974523,446.999999974089,445.999999973506,444.999999972782,443.999999972278,442.999999971792,441.999999971175,440.999999970509,439.999999970157,438.99999996966,437.99999996885,436.999999968048,435.999999967517,434.999999966606,433.999999965817,432.999999964871,431.999999964075,430.999999963114,429.999999962113,428.999999961283,427.99999996031,426.999999959201,425.999999958383,424.999999957021,423.99999995624,422.999999955134,421.999999954047,420.999999953155,419.999999952236,418.999999951426,417.999999951077,416.9999999502,415.999999949661,414.999999949124,413.999999948435,412.999999947832,411.999999947118,410.999999946175,409.999999945212,408.999999943689,407.99999994272,406.999999941781,405.99999994035,404.999999938842,403.999999937576,402.999999936252,401.999999934558,400.999999932929,399.999999931348,398.999999929711,397.999999928203,396.999999926409,395.999999924801,394.999999923199,393.999999921668,392.999999919844,391.99999991798,390.999999916263,389.999999914051,388.999999911632,387.999999909474,386.999999907376,385.999999904719,384.999999902237,383.999999899686,382.999999897105,381.999999894049,380.999999891234,379.999999887776,378.999999885005,377.99999986815,376.999999864282,375.999999859496,374.999999854574,373.999999848995,372.999999841309,371.999999832504,370.999999821265,369.999999806828,368.999999787132,367.999999760705,366.999999722844,365.999999669446,364.999999593012,363.999999483021,362.999999330049,361.999999118569,360.999998833054,359.999998454992,358.999997967895,357.999997357837,356.999996598922,355.99999567553,354.999994562314,353.999993234491,352.999991668873,351.999989865166,350.999987939647,349.999986330418,348.999985532564,347.999985308581,346.99998525608,345.999985211342,344.999985203368,343.999985190654,342.999985172671,341.999985169506,340.999985156076,339.999985155132,338.99998514344,337.999985140186,336.99998513648,335.999985122099,334.999985130556,333.999985119031,332.999985106415,331.999985110157,330.999985102572,329.999985103573,328.999985094831,327.999985081803,326.999985075215,325.999985068338,324.999985081078,323.999985077421,322.999985070498,321.999985068377,320.999985056219,319.99998505325,318.999985052645,317.999985075527,316.999985090463,315.999985086081,314.999985085761,313.999985073361,312.999985073226,311.999985069586,310.999985057202,309.999985056835,308.99998505104,307.999985051214,306.999985047349,305.999985032069,304.999985037991,303.99998502942,302.999985013303,301.999985012043,300.999985005356}; //April 2024 SHiP TB 24_att_single from Patrick
  G4double photon_April2024[399];
  for(unsigned int i = 0; i < sizeof(waveLength_April2024)/sizeof(waveLength_April2024[0]); i++) photon_April2024[i] = 1240./waveLength_April2024[i]*eV;

  G4double absLen_unpurified[151] = {7.41928480365393*m,7.68678403498895*m,7.91287034263266*m,7.98944770316961*m,8.08548242289423*m,8.05778791764816*m,8.09059945466605*m,8.11488877012421*m,8.15949366895364*m,8.24046357622784*m,8.36896424710391*m,8.5724798759478*m,8.85772575154252*m,8.85221167762828*m,8.81555436133421*m,9.05389571096987*m,9.48924122323874*m,9.76515374992161*m,9.51335775244241*m,9.45328043541621*m,8.97482880285293*m,8.70096539741452*m,8.48935917676502*m,8.44097817045948*m,8.44405991017534*m,8.43190261832563*m,8.38645678568186*m,8.35648742634518*m,8.33232353493578*m,8.33114526507463*m,8.23755943796866*m,8.13213459072979*m,7.8726545001728*m,7.65415458551032*m,7.5800588175385*m,7.6061295282424*m,7.69320756579235*m,7.7082984257603*m,7.70586123507162*m,7.70325134674453*m,7.66923841145675*m,7.64365261429804*m,7.62664064911952*m,7.55677185990663*m,7.50711974244003*m,7.45713654579468*m,7.43721662692559*m,7.35800834707499*m,7.22642533541789*m,7.11844709300408*m,7.01469716585332*m,6.96176069278602*m,6.90597103165448*m,6.84830374947254*m,6.84525178280356*m,6.83526672561362*m,6.79526318509296*m,6.71587945264393*m,6.63947275377847*m,6.6118444804822*m,6.49136793799083*m,6.42934488959944*m,6.31098091183809*m,6.21946196680514*m,6.15871441142064*m,6.09293247274225*m,6.02864030249323*m,5.94477355531049*m,5.86604224769804*m,5.80521857408766*m,5.73506328468108*m,5.66214631723293*m,5.57289275228197*m,5.49731700891059*m,5.39615082475944*m,5.30550194154553*m,5.19943157180204*m,5.0911745929865*m,4.99959477462503*m,4.90159698959031*m,4.7917682338105*m,4.6681139833648*m,4.55010411037092*m,4.40871123138021*m,4.28519387842501*m,4.16757742933685*m,4.04589813769501*m,3.91998342801409*m,3.79194507519573*m,3.65200866136557*m,3.51899905487626*m,3.36858314280228*m,3.219533855462*m,3.06634990702638*m,2.90804104570209*m,2.74757561840523*m,2.58972782886322*m,2.41918635504621*m,2.23054267956921*m,2.05636621586457*m,1.94127546199575*m,1.85826095244245*m,1.74682662700547*m,1.59879984499012*m,1.40361593174363*m,1.21010948607421*m,1.12298134358669*m,1.12861772574266*m,1.1046585196898*m,1.04234271232283*m,0.9941373021031*m,0.956557242515996*m,0.927425529399054*m,0.875744366988952*m,0.779908411841287*m,0.663313263320605*m,0.541094630094606*m,0.406926671366136*m,0.265001590325018*m,0.153480082825598*m,0.085384830013475*m,0.048210452365814*m,0.028221561196635*m,0.017250128891369*m,0.013236885579806*m,0.013016803788927*m,0.012986890579723*m,0.012971261573831*m,0.012958145564748*m,0.01294674529108*m,0.01293558959276*m,0.012928356570193*m,0.01292213175909*m,0.012913052869886*m,0.012909213986899*m,0.01290710804677*m,0.012901565135242*m,0.012897247581221*m,0.012890383936614*m,0.012881105659852*m,0.01286687734122*m,0.012849574178154*m,0.012838615276908*m,0.012833994111742*m,0.012830840543912*m,0.012822230954434*m,0.01281835788177*m,0.012816426865377*m,0.012807751818825*m,0.0128029524293*m,0.01279493404851*m}; // Patrick measurement Mainz TB_scintillator

  G4double absLen_purified[151] = {8.69251407037729*m,9.02995755323176*m,9.27373907607242*m,9.2987694632999*m,9.37254639295624*m,9.31493016410715*m,9.32945396614867*m,9.36095897891052*m,9.48082544118919*m,9.60814130202656*m,9.82801139775702*m,10.1046947101091*m,10.4907062873286*m,10.5108807867562*m,10.4753853636081*m,10.8002040964469*m,11.4980811433371*m,11.9325107778151*m,11.6636028590624*m,11.7094782859565*m,10.9852633716743*m,10.670267622928*m,10.3800086540752*m,10.3082593229783*m,10.3275701553562*m,10.3319544221576*m,10.2662283365215*m,10.2925732890662*m,10.3153782242223*m,10.3860868021326*m,10.3365901053944*m,10.231517114707*m,9.92788014563769*m,9.61898800830966*m,9.54402290594051*m,9.62746317964499*m,9.79692373936646*m,9.91423094765397*m,9.9643151940587*m,10.0187720504539*m,10.0358961669191*m,10.0802588950859*m,10.1054177127325*m,10.0818415254723*m,10.086029649153*m,10.1133311242014*m,10.1350472968498*m,10.0761167690658*m,9.90904041225772*m,9.77530373579883*m,9.66256670125958*m,9.65338010651176*m,9.63069786946983*m,9.62140630852179*m,9.71997172370098*m,9.79744658014088*m,9.80672901676583*m,9.78343285609755*m,9.72163465573446*m,9.80518793240826*m,9.69593799132894*m,9.67791627886446*m,9.59985620139408*m,9.55705239801755*m,9.57416795211246*m,9.56671620921144*m,9.59797651082656*m,9.56114765877604*m,9.53375540026655*m,9.55647549660189*m,9.54447464256824*m,9.53291003815433*m,9.49239969544417*m,9.49917662439382*m,9.42391963661282*m,9.3663798468712*m,9.32376570267581*m,9.22629281746381*m,9.17977310076775*m,9.12179277182491*m,9.00886669573072*m,8.85479490604375*m,8.71252334840956*m,8.50086621234753*m,8.33199872471845*m,8.18529383430015*m,8.02793280531241*m,7.84805101504057*m,7.67375314752583*m,7.46193191606457*m,7.24933185585757*m,7.00057529008316*m,6.78144433425612*m,6.57082163294415*m,6.3463075559428*m,6.13214412943496*m,5.9379419460511*m,5.73334467669744*m,5.53766879317458*m,5.3394385508064*m,5.15238124063095*m,4.98340338198499*m,4.8012155457967*m,4.60195158864653*m,4.41961657539783*m,4.22693302308812*m,4.0416225005906*m,3.87499604590985*m,3.71820540936771*m,3.5472216422986*m,3.36485969966114*m,3.15134802038665*m,2.90168745463681*m,2.5867387338465*m,2.16375663283064*m,1.66966271660288*m,1.14377099881739*m,0.680589789294733*m,0.360363924864896*m,0.181782601946722*m,0.093267712946957*m,0.0503991725824*m,0.02880952553709*m,0.01737142379557*m,0.013310009583829*m,0.013096262643175*m,0.013063354253155*m,0.013043343934459*m,0.013030737069578*m,0.013019803591978*m,0.013008275438005*m,0.012998844829755*m,0.012996396487048*m,0.012992079547825*m,0.012984198598302*m,0.012978816961298*m,0.012975348745523*m,0.012968698731763*m,0.012962219216222*m,0.012956981482458*m,0.012941499851657*m,0.012919404279236*m,0.012913555972765*m,0.012909301261196*m,0.012901893060039*m,0.012901203446858*m,0.012897730665173*m,0.012889608969039*m,0.012882419482255*m,0.012878996045324*m,0.0128715069987*m}; // Patrick measurement Mainz Column00+ppo

  G4double absLen_purified_April2024[399] = {11.9901516040732,13.0228960166473,13.9528777383294,14.7046996691213,15.9768902452922,16.6629805196179,17.999331985769,19.9574995247314,20.5855386803076,22.575216081699,27.2123998914562,31.1366105549673,34.8621829404345,39.3606106643598,40.4226748901874,46.3902271196357,51.9199112828555,56.999262649811,59.8498541849538,80.7689198266119,85.9064798746612,89.8813050665785,124.476535146334,150.150215014418,231.233196507782,300.044549138264,496.601404834279,1580.40204478823,4625.07435471402,0,0,0,0,0,10000,1124.33849303016,532.093214785195,230.643744042754,151.450526662912,91.6007625213965,61.1329347711462,50.2285524834353,37.3448515308487,28.2191423412306,23.2077564254201,19.339710898495,16.904954590282,15.1548473762563,13.5369858313687,12.7982735590643,12.3043773288621,12.1149324155327,12.2353247085806,12.3564929621731,12.8164656218764,13.269233154287,13.7198194436929,14.1773562656689,14.5104694743141,14.3960249463893,14.8675318570568,14.6738294318601,14.8947947663844,15.1106778809186,15.642453860515,16.6039463799149,18.3544521730499,20.4340538284434,23.3501281544416,26.781299630477,31.0685248814399,35.696317052286,43.9548552269152,52.7585703182418,66.5092751587881,79.0762152742444,103.435463812061,149.991186880996,160.96506705086,237.904399839875,372.859641622928,440.744036305544,267.29104007119,269.709037142221,146.646794498632,104.462163812855,73.5464911698517,54.6938234412361,42.4037026242876,34.8929001653234,30.0481885461433,27.5307862237204,26.2829665033277,26.5249321186635,28.4357507496551,32.1796552473359,37.1550713002896,42.7281370349023,50.4911388736352,63.4361538439058,73.1143697304687,88.8454813443946,117.664157151516,148.880547321855,217.092967711906,237.891368266673,300.751008915517,391.562014102025,488.117580444685,702.363043516412,938.81210961467,825.864253120593,3080.8310374144,757.622518883107,1344.56495946601,0,0,0,2365.86788763662,708.28129694079,634.376982044386,345.629097443462,274.037406554509,161.31383432875,124.743496167641,111.765455613477,87.7888731780684,80.3361375839663,78.9329734113854,69.7139197240651,66.7194177389684,68.2420187262279,66.6917544481204,62.8980817855875,63.3852320955023,64.3596284157631,64.1795535956111,62.0128342221081,49.4336606082449,39.8124840177554,39.9396543277874,40.7308908990689,41.8322913086058,41.7909638032551,41.8220860181378,42.1661503269722,45.6589759882751,46.5059733476245,47.2946851599384,50.3763463528219,53.2489004210849,53.7579662455194,54.2904296004331,53.4336529136059,54.2201646194478,56.2222615938262,57.8799492549131,59.6315350302765,61.7532986569004,62.3448868658736,62.287362409251,58.194056159074,54.8319310193425,52.4812370133785,49.7929926516485,45.6882765851382,44.0132100669556,44.2805197809573,43.0169159666473,42.3460939537833,43.2969594947139,44.1998516042291,46.3067982798849,47.796976588136,48.4838941565916,49.3445430477062,48.837190269285,49.4351611329376,48.0694300412124,44.9595723014262,44.6631945001773,41.033631241356,38.5652173290544,37.1645038885892,35.3736817366156,34.1177927433117,31.6987075045567,29.66600435633,28.1660681088144,27.1083901153316,25.8409665688148,24.2841489484576,22.7787180138092,22.0019596789935,21.3906556621031,20.5744535868453,19.9501041345129,19.172343527954,19.0286133241866,18.2187061984529,17.9729629034526,17.6476472988835,17.2725427606333,16.7725087213656,16.5266085167603,16.4437385239832,16.0546355681184,16.0499285600099,15.8389491348348,15.460271329169,15.5609420732786,15.3113601620242,15.2343225700141,15.0436795966484,14.8741174706379,14.7533038888915,14.8857413799284,14.975947209639,15.1361321889765,15.2512460285042,15.3229389006137,15.3376762074416,15.0523348886462,14.6559035584866,14.2992514525307,13.8537121883494,13.6585481616765,13.3708061965127,13.2344044617347,12.9427007835163,12.7016030576562,12.483600712511,12.1143353927661,11.8315738374695,11.6868875897389,11.4844817437089,11.1530002005071,10.9852579129437,10.7132950130048,10.5632203737028,10.3844540119863,10.1230526781721,9.85212509403507,9.64850846281043,9.50871001111565,9.31171111904239,9.05266751519963,8.92331526176187,8.72917470579492,8.48573933308413,8.37984108215146,8.15946285341882,8.01839068702195,7.83513972045393,7.61842177393,7.47532117623237,7.34239735065688,7.17937448290969,7.01137658993322,6.92689660415103,6.81004823243352,6.6263158239341,6.45401091347071,6.34541657623228,6.16596323149547,6.01888818336696,5.85110390847872,5.71726221641213,5.56330845230144,5.41145456016294,5.29204053717624,5.15825723882679,5.0136567824647,4.91234819834192,4.75167607564364,4.66473703897346,4.54646584724001,4.43587038923759,4.34928462630053,4.2634806456432,4.19079385729401,4.16069128492899,4.08568426194456,4.04124311980574,3.99796691708026,3.94348551077722,3.89711953987464,3.84345118431388,3.77455693723962,3.70669653642682,3.6038164752658,3.54155473135619,3.48319015434366,3.39762657479758,3.31184579023205,3.2431431026714,3.17429522934344,3.0902471937976,3.01350147629235,2.94258054588979,2.8725979156767,2.81101543202803,2.74105494765353,2.68130626019204,2.62425740915104,2.57200774656781,2.51235937960013,2.45417773212387,2.40292981844007,2.33992560368581,2.2746493675247,2.21945291250992,2.16830704264072,2.10675738724335,2.05235379526149,1.99930002237802,1.94832549505515,1.89118493367789,1.84146448068682,1.78381884434765,1.74018891851017,1.51423930180592,1.47051411393551,1.41975451384268,1.371089672575,1.3197875486031,1.25506774911069,1.18829887480291,1.11271661544958,1.02866298224713,0.932532199376102,0.828621720902414,0.714542663972779,0.598348550667449,0.485365985177349,0.38165712059349,0.294221865689565,0.223449833438334,0.168673069133985,0.127338460009272,0.0967812142285067,0.0744157937967776,0.0577995209753633,0.0454512037896105,0.0361423764671243,0.0290465228259353,0.0235864681354006,0.0193877942732895,0.0162918016735819,0.0143735508578532,0.013580751754028,0.0133736768409904,0.0133260565708843,0.013285746287345,0.013278594394087,0.0132672021251797,0.0132511177704774,0.0132482981600267,0.013236318689841,0.0132354865275972,0.0132250775745371,0.0132221896634395,0.0132189019229934,0.013206130831127,0.0132136529623275,0.0132034259597718,0.0131922492096028,0.0131955737402077,0.0131888633507604,0.0131897583461925,0.0131820302389385,0.0131705259253334,0.0131647205181127,0.0131586644595975,0.0131699124692386,0.0131666937833172,0.0131605964936815,0.01315873526797,0.0131480366347513,0.0131454334661682,0.0131449100199307,0.0131650770619133,0.0131782769213943,0.0131744126124586,0.0131741388189465,0.0131632022805083,0.0131630916607231,0.0131598909289764,0.0131489917584807,0.0131486782163203,0.0131435889240034,0.0131437510481259,0.013140361779836,0.0131269542130945,0.0131321597345599,0.0131246488165987,0.0131105398529052,0.0131094470163862,0.0131036079421321}; //April 2024 SHiP TB 24_att_single from Patrick

  for(unsigned int i = 0; i < sizeof(absLen_purified_April2024)/sizeof(absLen_purified_April2024[0]); i++) absLen_purified_April2024[i] = absLen_purified_April2024[i]*m;

  MPT_LAB_PPO->AddProperty("ABSLENGTH", photon_April2024, absLen_purified_April2024, 399, true, true);
  MPT_LAB_PPO->AddConstProperty("RESOLUTIONSCALE", 1.0); //??
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONTIMECONSTANT1", 4.3*ns); // https://pubs.rsc.org/en/content/articlepdf/2020/ma/d0ma00055h
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONTIMECONSTANT2", 13.4*ns); // https://pubs.rsc.org/en/content/articlepdf/2020/ma/d0ma00055h
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONTIMECONSTANT3", 86*ns); // https://pubs.rsc.org/en/content/articlepdf/2020/ma/d0ma00055h
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONYIELD1",0.82);
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONYIELD2",0.15);
  MPT_LAB_PPO->AddConstProperty("SCINTILLATIONYIELD3",0.037);
  LAB_PPO->SetMaterialPropertiesTable(MPT_LAB_PPO);


  //------------------------------------------------------------------------------
  //----------------------------- PMMA -----------------------------
  //------------------------------------------------------------------------------
  const G4int pmma_mpt_entr = 13;

  G4double pmma_refl_index_wl[pmma_mpt_entr] = {700.,600.,550.,500.,450.,400.,390.,380.,370.,350.,320.,310.,300.};
  G4double pmma_side_wl[8] = {632,543,440,405,375,320,310,300};
  G4double pmma_bottom_wl[37] = {632,543,440,405,375,358.8171433,353.7663967,348.7156502,343.6649037,338.6141572,333.5634107,328.5126642,323.4619177,318.4111712,313.3604247,308.3096782,303.2589317,298.3612381,293.1574387,288.1066922,283.0559457,278.0051992,272.9544526,267.9037061,262.8529596,257.8022131,252.7514666,247.8920363,242.6499736,237.5992271,232.5484806,227.4977341,222.4469876,217.3962411,212.3454946,207.2947481,202.0526854};
  G4double pmma_rind[pmma_mpt_entr] = {1.489,1.492,1.495,1.498,1.502,1.511,1.512,1.514,1.516,1.522,1.54,1.541,1.542}; // https://refractiveindex.info/?shelf=3d&book=plastics&page=pmma
  G4double pmma_refl_index_en[pmma_mpt_entr];
  G4double pmma_side_en[8];
  G4double pmma_bottom_en[37];
  for(int i = 0; i < pmma_mpt_entr; i++) pmma_refl_index_en[i] = 1240./pmma_refl_index_wl[i]*eV;
  for(unsigned int i = 0; i < sizeof(pmma_side_en)/sizeof(pmma_side_en[0]); i++) pmma_side_en[i] = 1240./pmma_side_wl[i]*eV;
  for(unsigned int i = 0; i < sizeof(pmma_bottom_en)/sizeof(pmma_bottom_en[0]); i++) pmma_bottom_en[i] = 1240./pmma_bottom_wl[i]*eV;
  G4double pmma_side_abslen[8] = {1.5*m,1*m,1*m,1*m,604.44*mm,24.6*mm,18.23*mm,10.55*mm}; // Tecacryl 3-4 / RTP 1-2-3 / Spartech 1-2 /Mc Master 	(From Micheal: https://arxiv.org/pdf/1310.6454.pdf)	for >375nm --- old measurements from the tube for <375nm 

  G4double pmma_bottom_abslen[37] = {17900*mm,125150*mm,2440*mm,262.5*mm,95*mm,0.353271102*mm,0.307327896*mm,0.301885495*mm,0.301900827*mm,0.301917182*mm,0.301934641*mm,0.301953291*mm,0.301973222*mm,0.301994529*mm,0.302017312*mm,0.302041678*mm,0.302067738*mm,0.341435928*mm,0.302125414*mm,0.347533944*mm,0.437466744*mm,0.556750518*mm,0.647685273*mm,0.644020575*mm,0.53581648*mm,0.367918167*mm,0.302452281*mm,0.32079176*mm,0.302566913*mm,0.302631272*mm,0.302701282*mm,0.302777948*mm,0.302862616*mm,0.30295711*mm,0.303063921*mm,0.303186472*mm,0.321725432*mm}; //RPT 4 / Spartech 3-4	 (From Micheal: https://arxiv.org/pdf/1310.6454.pdf) for >375nm --- andrew and doramas measurement for <375nm
  
  G4double pmma_side_wl_new[57] = {550,545,540,535,530,525,520,515,510,505,500,495,490,485,480,475,470,465,460,455,450,445,440,435,430,425,420,415,410,405,400,395,390,385,380,375,370,365,360,355,350,345,340,335,330,325,320,315,310,305,300,295,290,285,280,275,270};
  
  G4double pmma_side_abslen_new[57] = {472.626403500485,472.47431927557,472.442875276582,472.548069065499,472.503941286975,472.717214657718,473.449818351276,473.924385233674,475.069753001741,474.877497105366,475.03999205846,473.890412182362,475.831343905636,473.79358106133,475.253004464295,470.790625727439,470.497047736906,472.259113792486,472.931200356411,472.365745218049,470.881247507505,470.708148061025,469.722655892388,469.20573460488,468.340978652268,467.724990027454,466.424650040469,465.387657347346,464.676776284062,463.446924175645,462.489280782535,461.435833610124,459.974991506271,458.087943295396,455.842768535932,452.224327990847,449.384367527057,444.861880129657,439.189956124801,432.269666813194,423.7477750101,414.172287702685,404.353357130681,390.519697889426,369.419537577731,346.777708977586,327.537561287855,296.568368423133,257.906895924098,214.610379424564,175.424523581044,141.385052228302,112.73196443914,90.6391278206925,73.2747503375892,57.4643292737885,44.7190787748292}; // from John Rack-Helleis (Mainz) measurements and corrected with Christian Scharf (Berlin) thesis formula 
  
  G4double pmma_bottom_wl_new[58] = {545,540,535,530,525,520,515,510,505,500,495,490,485,480,475,470,465,460,455,450,445,440,435,430,425,420,415,410,405,400,395,390,385,380,375,370,365,360,355,350,345,340,335,330,325,320,315,310,305,300,295,290,285,280,275,270,265,260};
  
  G4double pmma_bottom_abslen_new[58] = {351.350063334171,351.999125361121,350.789205816769,350.157544826916,349.964814524976,349.905090650762,349.209562761158,349.2001239779,349.050276048572,348.952244986273,348.460024783965,347.714842442585,347.227536096873,346.878098226731,346.294344025831,346.316453434341,345.45962390967,344.223231991828,343.439096892365,342.746147890309,341.376979566388,341.060656138989,340.221475069691,339.08960889221,337.887636842857,336.098835449247,333.584401979514,328.567896278262,316.064904235738,286.663031783464,229.193328437948,150.621295694047,82.6320843414912,43.3974238845659,23.9716600974233,15.1960657437843,12.4427779773735,12.1974417410274,12.4676517189804,12.9540782532771,13.3653510241641,13.541055915037,13.4195096806019,13.2944731221916,13.1983301819591,13.1537884218875,13.1125467948418,13.1384675907102,13.2390134915731,13.4511160842576,13.8139219043694,14.3241576852257,14.9667556104642,15.7120711674145,16.6545751702108,17.6424558957449,18.2588587216547,18.5796529296663}; // from John Rack-Helleis (Mainz) measurements and corrected with Christian Scharf (Berlin) thesis formula 
  
  G4double pmma_side_en_new[8];
  G4double pmma_bottom_en_new[37];
  for(unsigned int i = 0; i < sizeof(pmma_side_en_new)/sizeof(pmma_side_en_new[0]); i++) pmma_side_en_new[i] = 1240./pmma_side_wl_new[i]*eV;
  for(unsigned int i = 0; i < sizeof(pmma_bottom_en_new)/sizeof(pmma_bottom_en_new[0]); i++) pmma_bottom_en_new[i] = 1240./pmma_bottom_wl_new[i]*eV;

  G4MaterialPropertiesTable *MPT_PMMA_side = new G4MaterialPropertiesTable();
  MPT_PMMA_side->AddProperty("ABSLENGTH", pmma_side_en, pmma_side_abslen, 8, true, true);
  MPT_PMMA_side->AddProperty("RINDEX", pmma_refl_index_en, pmma_rind, pmma_mpt_entr, true, true);
  PMMA_side->SetMaterialPropertiesTable(MPT_PMMA_side);

  G4MaterialPropertiesTable *MPT_PMMA_bottom = new G4MaterialPropertiesTable();
  MPT_PMMA_bottom->AddProperty("RINDEX", pmma_refl_index_en, pmma_rind, pmma_mpt_entr, true, true);
  MPT_PMMA_bottom->AddProperty("ABSLENGTH", pmma_bottom_en, pmma_bottom_abslen, 37);
  PMMA_bottom->SetMaterialPropertiesTable(MPT_PMMA_bottom);


  //------------------------------------------------------------------------------
  //----------------------------- WLS_Coat -----------------------------
  //------------------------------------------------------------------------------
  G4MaterialPropertiesTable *MPT_WLSCoat = new G4MaterialPropertiesTable();
  G4double waveLength3[272] = {560,559,558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,539,538,537,536,535,534,533,532,531,530,529,528,527,526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,510,509,508,507,506,505,504,503,502,501,500,499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,446,445,444,443,442,441,440,439,438,437,436,435,434,433,432,431,430,429,428,427,426,425,424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,406,405,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,388,387,386,385,384,383,382,381,380,379,378,377,376,375,374,373,372,371,370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302,301,300,299,298,297,296,295,294,293,292,291,290,289};
  G4double photonEnergy5[272];
  for(unsigned int i = 0; i < sizeof(photonEnergy5)/sizeof(photonEnergy5[0]); i++) photonEnergy5[i] = 1240./waveLength3[i]*eV;
  G4double absLen3[272] = {1875.34495*mm,1815.34495*mm,1755.34495*mm,1695.34495*mm,1635.34495*mm,1575.34495*mm,1515.34495*mm,1455.34495*mm,1415.34495*mm,1375.34495*mm,1335.34495*mm,1295.34495*mm,1255.34495*mm,1215.34495*mm,1175.34495*mm,1135.34495*mm,1095.34495*mm,1075.34495*mm,1055.34495*mm,1035.34495*mm,1015.34495*mm,995.34495*mm,975.34495*mm,955.34495*mm,935.34495*mm,915.34495*mm,895.34495*mm,875.34495*mm,855.34495*mm,835.34495*mm,815.34495*mm,795.34495*mm,775.34495*mm,755.34495*mm,735.34495*mm,715.34495*mm,695.34495*mm,675.34495*mm,655.34495*mm,635.34495*mm,625.34495*mm,615.34495*mm,605.34495*mm,595.34495*mm,585.34495*mm,575.34495*mm,565.34495*mm,555.34495*mm,545.34495*mm,535.34495*mm,525.34495*mm,515.34495*mm,505.34495*mm,495.34495*mm,485.34495*mm,475.34495*mm,465.34495*mm,455.34495*mm,445.34495*mm,439.34495*mm,433.34495*mm,427.34495*mm,421.34495*mm,415.34495*mm,409.34495*mm,403.34495*mm,397.34495*mm,391.34495*mm,385.34495*mm,379.34495*mm,373.34495*mm,367.34495*mm,361.34495*mm,355.34495*mm,349.34495*mm,343.34495*mm,337.34495*mm,331.34495*mm,325.34495*mm,319.34495*mm,313.34495*mm,307.34495*mm,301.34495*mm,295.34495*mm,289.34495*mm,283.34495*mm,277.34495*mm,271.34495*mm,265.34495*mm,259.34495*mm,253.34495*mm,247.34495*mm,242.84495*mm,238.34495*mm,233.84495*mm,229.34495*mm,224.84495*mm,220.34495*mm,215.84495*mm,211.34495*mm,206.84495*mm,202.34495*mm,197.84495*mm,193.34495*mm,188.84495*mm,184.34495*mm,179.84495*mm,175.34495*mm,170.84495*mm,166.34495*mm,161.84495*mm,157.34495*mm,152.84495*mm,148.34495*mm,143.84495*mm,139.34495*mm,134.84495*mm,130.34495*mm,125.84495*mm,121.34495*mm,116.84495*mm,112.34495*mm,107.84495*mm,103.34495*mm,98.84495*mm,95.34495*mm,91.84495*mm,88.34495*mm,84.84495*mm,81.34495*mm,77.84495*mm,74.34495*mm,70.84495*mm,67.34495*mm,63.84495*mm,60.34495*mm,56.84495*mm,53.34495*mm,49.84495*mm,46.34495*mm,42.84495*mm,39.34495*mm,35.84495*mm,32.34495*mm,28.84495*mm,26.34495*mm,23.84495*mm,21.34495*mm,18.84495*mm,16.34495*mm,13.84495*mm,11.34495*mm,8.84495*mm,6.34495*mm,3.84495*mm,1.34495*mm,0.4858*mm,0.30961*mm,0.21896*mm,0.15935*mm,0.11815*mm,0.08933*mm,0.06919*mm,0.0549*mm,0.04435*mm,0.03637*mm,0.0303*mm,0.02561*mm,0.02199*mm,0.01915*mm,0.0169*mm,0.01509*mm,0.01362*mm,0.01244*mm,0.01145*mm,0.01062*mm,0.00991*mm,0.00931*mm,0.0088*mm,0.00835*mm,0.00795*mm,0.0076*mm,0.00724*mm,0.00695*mm,0.00668*mm,0.00642*mm,0.00618*mm,0.00596*mm,0.00574*mm,0.00554*mm,0.00536*mm,0.00519*mm,0.00503*mm,0.0049*mm,0.00477*mm,0.00466*mm,0.00457*mm,0.0045*mm,0.00443*mm,0.00437*mm,0.00433*mm,0.0043*mm,0.00427*mm,0.00425*mm,0.00423*mm,0.00422*mm,0.00422*mm,0.00421*mm,0.00422*mm,0.00422*mm,0.00423*mm,0.00425*mm,0.00427*mm,0.00429*mm,0.00433*mm,0.00437*mm,0.00442*mm,0.00448*mm,0.00454*mm,0.00462*mm,0.0047*mm,0.00479*mm,0.00489*mm,0.005*mm,0.00512*mm,0.00524*mm,0.00538*mm,0.00552*mm,0.00568*mm,0.00584*mm,0.00601*mm,0.00619*mm,0.00637*mm,0.00654*mm,0.0067*mm,0.00685*mm,0.00697*mm,0.00707*mm,0.00713*mm,0.00717*mm,0.00717*mm,0.00714*mm,0.00708*mm,0.00698*mm,0.00684*mm,0.00667*mm,0.00647*mm,0.00626*mm,0.00602*mm,0.00579*mm,0.00556*mm,0.00535*mm,0.00515*mm,0.00498*mm,0.00484*mm,0.00474*mm,0.00469*mm,0.00469*mm,0.00473*mm,0.00482*mm,0.00497*mm,0.00517*mm,0.00544*mm,0.00584*mm,0.00628*mm,0.00694*mm,0.00779*mm,0.009*mm,0.01068*mm,0.01369*mm,0.01871*mm,0.03013*mm}; //Jakobs measure without BPEA  
  MPT_WLSCoat->AddProperty("WLSABSLENGTH", photonEnergy5, absLen3, 272);  // jakob thesis -- without BPEA 

  // BIS reemission
  G4double waveLength4[51] = {498.50394264782,495.512169509067,489.3462170527,484.343493743363,479.225925762846,472.348366539066,467.849074868481,464.04990973537,461.338683704906,459.793161903923,457.56412302422,454.795680527534,
  451.768205666593,446.867663596341,441.763591710159,435.933166703427,433.243802562634,431.985904788012,429.963943988042,427.926782673168,426.395623114075,425.126769876294,422.410632741153,420.384395226982,
  417.93569195544,415.411789507185,413.448584543676,412.387719607238,411.249479281543,409.9604817049,406.3089221806,404.020506020059,401.848223327902,399.264457914078,397.452088829242,394.82668707538,
  393.620389802785,392.661003458199,390.948731712797,389.702126722733,388.693734027439,388.169942931827,387.606839417529,386.814987134474,386.022324288337,384.176496975521,382.716212740349,381.014431692937,
  378.83045463701,376.455517150279,373.305908776801};   // ol. the actualy one  
  G4double photonEnergy6[51];
  for(unsigned int i = 0; i < sizeof(photonEnergy6)/sizeof(photonEnergy6[0]); i++) photonEnergy6[i] = 1240./waveLength4[i]*eV;
  G4double reEmit4[51] = {0.095367125872878,0.100714589065125,0.13933792816855,0.176288041362039,0.211928140548633,0.245505005810625,0.273370328546945,0.30221148342213,0.333093045311687,0.364223283871252,0.399221677160171,
  0.448451857613,0.514706458856799,0.566173063784637,0.587186163465084,0.619912730325973,0.657430320109198,0.6974131402047,0.747799923939089,0.82411878610154,0.886968238152526,0.927207898674191,0.972182090856316,
  0.995579234732068,0.973067015983444,0.930457495931142,0.880606822664751,0.837907842014882,0.808317266222523,0.778775703403637,0.739211827896116,0.774816618055286,0.818288494562106,0.86029367303487,
  0.836373519169372,0.783204456572165,0.716723640486035,0.653897573842595,0.600839623111776,0.539529302980934,0.482274276482319,0.45143792246339,0.403951196810372,0.355312021195194,0.308055666198011,
  0.257497891356571,0.199434040798557,0.131499952640494,0.074850729151259,0.038245233587249,0.007817590412588}; // (jakob) https://omlc.org/spectra/PhotochemCAD/html/044.html
  //G4double ppckovEmit[8] = {2.95*eV,2.95*eV,2.95*eV,2.95*eV,2.6401*eV,3.0402*eV,3.5403*eV,3.8404*eV}; 
  //G4double rindexWLS[8] = {1.5,1.5,1.5,1.5,1.504,1.505,1.515,1.52};

  MPT_WLSCoat->AddProperty("WLSCOMPONENT", photonEnergy6, reEmit4, 51);
  MPT_WLSCoat->AddConstProperty("WLSTIMECONSTANT", 2.*ns); // More or less it should be this value
  MPT_WLSCoat->AddProperty("RINDEX", pmma_refl_index_en, pmma_rind, pmma_mpt_entr, true, true); //??

  WLS_Coat->SetMaterialPropertiesTable(MPT_WLSCoat);


  //------------------------------------------------------------------------------
  //----------------------------- Air -----------------------------
  //------------------------------------------------------------------------------
  G4double photonEnergy_Air[2] = {2.*eV, 5.*eV};
  G4double refractiveIndex_Air[2] = {1.00, 1.00};
  G4MaterialPropertiesTable* MPT_Air = new G4MaterialPropertiesTable();
  MPT_Air->AddProperty("RINDEX", photonEnergy_Air, refractiveIndex_Air, 2);
  air->SetMaterialPropertiesTable(MPT_Air);
  
  
  //------------------------------------------------------------------------------
  //----------------------------- Silicon Resin  -----------------------------
  //------------------------------------------------------------------------------
  G4double photonEnergy_ResinSi[3] = {2.*eV, 4.*eV, 5.*eV};
  G4double refractiveIndex_ResinSi[3] = {1.57, 1.57, 1.57}; //Hamamatsu data sheet
  G4MaterialPropertiesTable* MPT_ResinSi = new G4MaterialPropertiesTable();
  MPT_ResinSi->AddProperty("RINDEX", photonEnergy_ResinSi, refractiveIndex_ResinSi, 3);
  ResinSi->SetMaterialPropertiesTable(MPT_ResinSi);
  
  
  //------------------------------------------------------------------------------
  //----------------------------- Silicon  -----------------------------
  //------------------------------------------------------------------------------
  G4double photonEnergy_Si[3] = {2.76*eV,2.88*eV,3.10*eV};
  G4double refractiveIndex_Si[3] = {2.59,2.75,2.91}; //from article 2002.04218 
  G4MaterialPropertiesTable* MPT_Si = new G4MaterialPropertiesTable(); 
  MPT_Si->AddProperty("RINDEX", photonEnergy_Si, refractiveIndex_Si, 3);
  Silicon->SetMaterialPropertiesTable(MPT_Si);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::DefineSurfaces()
{
  //------------------------------------------------------------------------------
  //----------------------------- Steel -----------------------------
  //------------------------------------------------------------------------------
  G4OpticalSurface* SteelBoxSurface = new G4OpticalSurface("SteelBoxSurface");
  SteelBoxSurface->SetType(dielectric_metal);
  SteelBoxSurface->SetFinish(ground);
  SteelBoxSurface->SetModel(unified);

  G4double photonEnergy9[2] = {1*eV, 5*eV};

  G4double other_coating[2] = {0, 0}; // it is not relevant in our case, it is for not smooth surfaces 
  G4double specular_Al[2] = {0.25, 0.25};
  G4double total_Al[2] = {0.60, 0.60};

  G4MaterialPropertiesTable *MPTsurf_Steel = new G4MaterialPropertiesTable();
  MPTsurf_Steel->AddProperty("SPECULARSPIKECONSTANT", photonEnergy9, other_coating, 2); //  The diffuse is 1-other three (in this case 1-specular).
  MPTsurf_Steel->AddProperty("BACKSCATTERCONSTANT", photonEnergy9, other_coating, 2);
  MPTsurf_Steel->AddProperty("SPECULARLOBECONSTANT", photonEnergy9, specular_Al, 2);
  MPTsurf_Steel->AddProperty("REFLECTIVITY", photonEnergy9, total_Al, 2);
  SteelBoxSurface->SetMaterialPropertiesTable(MPTsurf_Steel);

  G4LogicalSkinSurface* Surface = new G4LogicalSkinSurface("Steel_Surface", SteelBoxLV, SteelBoxSurface);

   
  //------------------------------------------------------------------------------
  //----------------------------- Absorbent surface SiPMs -----------------------------
  //------------------------------------------------------------------------------
  G4OpticalSurface* sipmSurface = new G4OpticalSurface("sipmSurface");
  sipmSurface->SetType(dielectric_metal);
  sipmSurface->SetFinish(ground);
  sipmSurface->SetModel(unified);
  
  G4double waveLength7[2] = {1000, 100}; 
   
  G4double photonEnergy10[2];
  for(unsigned int i = 0; i < sizeof(photonEnergy10)/sizeof(photonEnergy10[0]); i++) photonEnergy10[i] = 1240./waveLength7[i]*eV;
  G4double abs_sipm[2] = {0, 0}; // we want that the surface of the sipms sides is completely absorbent
       
  G4MaterialPropertiesTable* MTP_sipms = new G4MaterialPropertiesTable();
  MTP_sipms->AddProperty("REFLECTIVITY", photonEnergy10, abs_sipm, 2);

  sipmSurface->SetMaterialPropertiesTable(MTP_sipms); 	
   
  G4LogicalSkinSurface* SurfaceSipm = new G4LogicalSkinSurface("sipm_Surface", sipmSensLV, sipmSurface);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::DefineSolids()
{
  ExpHallBox = new G4Box("World_Box", fExpHall, fExpHall, fExpHall);
  //-------------------------------------------------------------------
  //-------------------------------------------------------------------
  double x = 400*mm;

  // Steel box
  std::vector<G4TwoVector> det = {G4TwoVector(-x, -ybl), G4TwoVector(-x, ytl), G4TwoVector(x, ytr), G4TwoVector(x, -ybr), G4TwoVector(-x, -ybl), G4TwoVector(-x, ytl), G4TwoVector(x, ytr), G4TwoVector(x, -ybr)};
  G4GenericTrap* SteelBox = new G4GenericTrap("Steel_Box", SteelZ/2., det);

  // Scintillator box left top
  std::vector<G4TwoVector> scint = 
  {G4TwoVector(-x+WallThick, -ybl+WallThick),
   G4TwoVector(-x+WallThick, ytl-WallThick),
   G4TwoVector(x-WallThick, ytr-WallThick),
   G4TwoVector(x-WallThick, -ybr+WallThick),
   G4TwoVector(-x+WallThick, -ybl+WallThick),
   G4TwoVector(-x+WallThick, ytl-WallThick),
   G4TwoVector(x-WallThick, ytr-WallThick),
   G4TwoVector(x-WallThick, -ybr+WallThick)};
  G4GenericTrap* ScintillatorBox = new G4GenericTrap("Scintillator_Box", SctZ/2., scint);
  
  G4double Rin, Rout;

  // Outer tube
  Rin = Diam_Out_In/2;
  Rout = Diam_Out_Out/2;
  OuterTube  = new G4Tubs("Outer_Tube", Rin, Rout, Length_Out/2, 0, 360*deg);
  // Air gap out
  Rin = Diam_WOM_Out/2 + Thickness_WLS;
  Rout = Diam_Out_In/2;
  AirGapOut  = new G4Tubs("Air_Gap_Out", Rin, Rout, (Length_WOM + Thickness_Gap)/2, 0, 360*deg);
  // WLS tube out
  Rin = Diam_WOM_Out/2;
  Rout = Diam_WOM_Out/2 + Thickness_WLS;
  WLSOut  = new G4Tubs("WLS_Out", Rin, Rout, Length_WOM/2, 0, 360*deg);
  // WOM tube
  Rin = Diam_WOM_In/2;
  Rout = Diam_WOM_Out/2;
  WOMTube  = new G4Tubs("WOM_Tube", Rin, Rout, Length_WOM/2, 0, 360*deg);
  // WLS tube in
  Rin = Diam_WOM_In/2 - Thickness_WLS;
  Rout = Diam_WOM_In/2;
  WLSIn  = new G4Tubs("WLS_In", Rin, Rout, Length_WOM/2, 0, 360*deg);
  // Air gap in
  Rin = Diam_In_Out/2;
  Rout = Diam_WOM_In/2 - Thickness_WLS;
  AirGapIn  = new G4Tubs("Air_Gap_In", Rin, Rout, (Length_WOM + Thickness_Gap)/2, 0, 360*deg);
  // Inner tube
  Rin = Diam_In_In/2;
  Rout = Diam_In_Out/2;
  InnerTube  = new G4Tubs("Inner_Tube", Rin, Rout, Length_In/2, 0, 360*deg);
  // PMMA disk
  Rin = 0.0*mm;
  Rout = Diam_In_Out/2;
  PMMADisk  = new G4Tubs("PMMA_Disk", Rin, Rout, Thickness_Disk/2, 0, 360*deg);
  // PMMA ring
  Rin = Diam_In_In/2;
  Rout = Diam_Out_Out/2;
  PMMARingLower  = new G4Tubs("PMMA_Ring_Lower", Rin, Rout, Thickness_Ring/2, 0, 360*deg);
  // Air ring outer
  Rin = (Diam_WOM_Out - 1*mm)/2;
  Rout = Diam_WOM_Out/2 + Thickness_WLS;
  AirRingOut = new G4Tubs("Air_Ring_Out", Rin, Rout, Thickness_Gap/2, 0, 360*deg);
  // PMMA ring supporting WOM
  Rin = (Diam_WOM_In + 1*mm)/2;
  Rout = (Diam_WOM_Out - 1*mm)/2;
  PMMARing = new G4Tubs("PMMA_Ring", Rin, Rout, Thickness_Gap/2, 0, 360*deg);
  // Air ring inner
  Rin = Diam_WOM_In/2 - Thickness_WLS;
  Rout = (Diam_WOM_In + 1*mm)/2; 
  AirRingIn = new G4Tubs("Air_Ring_In", Rin, Rout, Thickness_Gap/2, 0, 360*deg);
  // Hole in box
  Rin = 0.0*mm;
  Rout = Diam_Out_Out/2; 
  HoleBox  = new G4Tubs("Hole_Box", Rin, Rout, (Length_Out + Thickness_Ring)/2, 0, 360*deg);
  // PMMA "hat"
  Rin = Diam_Out_Out/2;
  Rout = Diam_Hat/2;
  PMMAHat = new G4Tubs("PMMA_Hat", Rin, Rout, Thickness_Hat/2, 0, 360*deg);
  // Additional steel
  Rin = 0.0*mm;
  Rout = Diam_Steel_Add/2;
  G4double y1 = Diam_Steel_Add;
  G4double z1 = Thickness_Steel_Add_Top - Thickness_Steel_Add_Bot;
  G4double y2 = z1/y1*(1/(1+z1/y1));
  G4double z2 = 1-y2;
  G4double overlap = 0.01*mm;
  SteelAdd = new G4CutTubs("Steel_Add", Rin, Rout, Thickness_Steel_Add_Bot/2+z1/4+overlap/2, 0, 360*deg, G4ThreeVector(0, 0, -1), G4ThreeVector(0, -y2, z2));
  // LAB&PPO inside tube
  Rin = 0.0*mm;
  Rout = Diam_In_In/2;
  SctInside = new G4Tubs("Sct_Inside", Rin, Rout, (Length_In + Thickness_Ring)/2, 0, 360*deg);

  G4SubtractionSolid* EmptySteelBox = new G4SubtractionSolid("Empty_Steel_Box", SteelBox, ScintillatorBox, 0, G4ThreeVector(0, 0, 0));
  
  G4double delta_Z_ScintillatorBoxWithHole = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + (Length_Out + Thickness_Ring)/2;
  G4double delta_Z_Steel_Add = SteelZ/2 + Thickness_Steel_Add_Bot/2 + (Thickness_Steel_Add_Top - Thickness_Steel_Add_Bot)/4 - overlap;
  G4double xrot = atan((Thickness_Steel_Add_Top - Thickness_Steel_Add_Bot)/Diam_Steel_Add)*180/pi;
  G4RotationMatrix* RM1 = new G4RotationMatrix(0*deg, 0*deg, 0*deg); RM1->rotateX(xrot*deg);

  std::vector<G4UnionSolid*> EmptySteelBoxWithAdd_tempvec;
  std::vector<G4SubtractionSolid*> EmptySteelBoxWithHole_tempvec;
  std::vector<G4SubtractionSolid*> ScintillatorBoxWithHole_tempvec;

  EmptySteelBoxWithAdd_tempvec.push_back(new G4UnionSolid("Empty_Steel_Box_With_Add_0", EmptySteelBox, SteelAdd, 0, G4ThreeVector(WOM_coord_vec[0].first, WOM_coord_vec[0].second, delta_Z_Steel_Add)));
  EmptySteelBoxWithAdd_tempvec.push_back(new G4UnionSolid("Empty_Steel_Box_With_Add_1", EmptySteelBoxWithAdd_tempvec.back(), SteelAdd, 0, G4ThreeVector(WOM_coord_vec[1].first, WOM_coord_vec[1].second, delta_Z_Steel_Add)));

  for(unsigned int pos = 0; pos<WOM_coord_vec.size(); pos++) {
    G4Transform3D t_SteelHole = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_ScintillatorBoxWithHole-SteelZ/2-Thickness_Steel_Add_Bot);
    if(pos == 0) {
      EmptySteelBoxWithHole_tempvec.push_back(new G4SubtractionSolid("Empty_Steel_Box_With_Hole_0", EmptySteelBoxWithAdd_tempvec.back(), HoleBox, t_SteelHole));
      ScintillatorBoxWithHole_tempvec.push_back(new G4SubtractionSolid("Scintillator_Box_With_Hole_0", ScintillatorBox, HoleBox, t_SteelHole));
    }
    else {
      EmptySteelBoxWithHole_tempvec.push_back(new G4SubtractionSolid("Empty_Steel_Box_With_Hole_1", EmptySteelBoxWithHole_tempvec.back(), HoleBox, t_SteelHole));
      ScintillatorBoxWithHole_tempvec.push_back(new G4SubtractionSolid("Scintillator_Box_With_Hole_1", ScintillatorBoxWithHole_tempvec.back(), HoleBox, t_SteelHole));
    }
  }
  EmptySteelBoxWithHole = EmptySteelBoxWithHole_tempvec.back();
  ScintillatorBoxWithHole = ScintillatorBoxWithHole_tempvec.back();
 
  sipmBox = new G4Box("sipm_Box", Length_sipm_box/2, Length_sipm_box/2, Length_sipm_box/2);
 
  // SIPMs 14161 - 3050HS
  sipmHole = new G4Box("sipm_Hole", sipmSizeSens/2., sipmSizeSens/2., (sipmSensThickness + sipmSensThicknessTop)/2);
  sipmSensTop = new G4Box("sipm_Sens_Top", sipmSizeSens/2., sipmSizeSens/2., sipmSensThicknessTop/2.);
  sipmSens = new G4Box("sipm_Sens", sipmSizeSens/2., sipmSizeSens/2., sipmSensThickness/2.);
  sipmWindowAll = new G4Box("sipm_All", sipmSize/2., sipmSize/2., sipmWindowThickness);
  sipmWindow = new G4SubtractionSolid("sipm_Window", sipmWindowAll, sipmHole, 0, G4ThreeVector(0, 0, (sipmSensThickness + sipmSensThicknessTop)/2)); 
  sipmBaseBox = new G4Box("sipm_Base", sipmSize/2., sipmSize/2., sipmBaseThickness/2.);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::DefineLogicalVolumes()
{
  ExpHallLV = new G4LogicalVolume(ExpHallBox, air, "World_LV", 0, 0, 0);
  ScintillatorBoxLV = new G4LogicalVolume(ScintillatorBoxWithHole, LAB_PPO, "Scintillator_Box_LV", 0, 0, 0);
  SteelBoxLV = new G4LogicalVolume(EmptySteelBoxWithHole, Al, "Steel_Box_LV", 0, 0, 0);
  OuterTubeLV = new G4LogicalVolume(OuterTube, PMMA_side, "Outer_Tube_LV");
  WOMTubeLV = new G4LogicalVolume(WOMTube, PMMA_bottom, "WOM_Tube_LV");
  InnerTubeLV = new G4LogicalVolume(InnerTube, PMMA_side, "Inner_Tube_LV");
  PMMARingLowerLV = new G4LogicalVolume(PMMARingLower, PMMA_bottom, "PMMA_Ring_Lower_LV");
  PMMADiskLV = new G4LogicalVolume(PMMADisk, PMMA_side, "PMMA_Disk_LV");
  AirGapOutLV = new G4LogicalVolume(AirGapOut, air, "Air_Gap_Out_LV");
  AirGapInLV = new G4LogicalVolume(AirGapIn, air, "Air_Gap_In_LV");
  WLSOutLV = new G4LogicalVolume(WLSOut, WLS_Coat, "WLS_Out_LV");
  WLSInLV = new G4LogicalVolume(WLSIn, WLS_Coat, "WLS_In_LV");
  PMMAHatLV = new G4LogicalVolume(PMMAHat, PMMA_side, "PMMA_Hat_LV");
  AirRingOutLV = new G4LogicalVolume(AirRingOut, air, "Air_Ring_Out_LV");
  AirRingInLV = new G4LogicalVolume(AirRingIn, air, "Air_Ring_In_LV");
  PMMARingLV = new G4LogicalVolume(PMMARing, PMMA_bottom, "PMMA_Ring_LV");
  SctInsideLV = new G4LogicalVolume(SctInside, LAB_PPO, "Sct_Inside_LV");
  sipmSensLV = new G4LogicalVolume(sipmSens, Silicon, "sipm_Sens_LV");
  sipmSensTopLV = new G4LogicalVolume(sipmSensTop, Silicon, "sipm_Sens_Top_LV");
  sipmWindowLV = new G4LogicalVolume(sipmWindow, ResinSi, "sipm_Window_LV");
  sipmBaseBoxLV = new G4LogicalVolume(sipmBaseBox, Al, "sipm_Base_Box_LV");
  sipmBoxLV = new G4LogicalVolume(sipmBox, Al, "sipm_Box_LV");
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceDetectorConstruction::ConstructVolumes()
{
  ExpHallPV = new G4PVPlacement(0, G4ThreeVector(), ExpHallLV, "World_PV", 0, false, 999);

  G4double xrot = atan((Thickness_Steel_Add_Top - Thickness_Steel_Add_Bot)/Diam_Steel_Add)*180/pi;
  G4RotationMatrix* RM1 = new G4RotationMatrix(0*deg, 0*deg, 0*deg); RM1->rotateX(xrot*deg); 

  SteelBoxPV = new G4PVPlacement(0, G4ThreeVector(), SteelBoxLV, "Steel_Box_PV", ExpHallLV, false, 100, intersect_check);
  ScintillatorBoxPV = new G4PVPlacement(0, G4ThreeVector(), ScintillatorBoxLV, "Scintillator_Box_PV", ExpHallLV, false, 200, intersect_check);

  // PMMA Staff
  // Outer tube
  G4double delta_Z_Outer_tube = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Length_Out/2 + Thickness_Ring;
  // Air gap
  G4double delta_Z_Air_gap = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Length_WOM/2 + Thickness_Ring + Thickness_Gap/2;
  // WOM tube
  G4double delta_Z_WOM = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Length_WOM/2 + Thickness_Ring + Thickness_Gap;
  // Inner tube
  G4double delta_Z_Inner_tube = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Length_In/2 + Thickness_Ring;
  // PMMA Ring
  G4double delta_Z_PMMA_Ring = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Thickness_Ring/2;
  // PMMA Disk
  G4double delta_Z_PMMA_Disk = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Length_In + Thickness_Ring + Thickness_Disk/2;
  // PMMA Hat
  G4double delta_Z_PMMA_Hat = SteelZ/2 + Thickness_Steel_Add_Bot + Thickness_Hat/2;
  // LAB&PPO inside tube
  G4double delta_Z_Sct_Inside = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + (Length_In + Thickness_Ring)/2;
  // Air ring
  G4double delta_Z_upper_ring = SctZ/2 - (Length_WOM - Thickness_Steel_Add_Bot - Thickness_Hat - WallThick) + Thickness_Ring + Thickness_Gap/2;

  G4int n_sipm = 40;
  G4double radius_sipm = (Diam_WOM_In + Diam_WOM_Out)/4.;
  G4int wom_id = 1;
  G4int sipm_id = 0;

  for(unsigned int pos = 0; pos < WOM_coord_vec.size(); pos++) {
    G4Transform3D t_OuterTube = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_Outer_tube-SteelZ/2-Thickness_Steel_Add_Bot);
    OuterTubePV_vect.push_back(new G4PVPlacement(t_OuterTube, OuterTubeLV, "Outer_Tube_PV", ExpHallLV, false, 300, intersect_check));
    G4Transform3D t_WOMTube = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_WOM-SteelZ/2-Thickness_Steel_Add_Bot);
    WOMTubePV_vect.push_back(new G4PVPlacement(t_WOMTube, WOMTubeLV, "WOM_Tube_PV", ExpHallLV, false, 400, intersect_check));
    G4Transform3D t_InnerTube = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_Inner_tube-SteelZ/2-Thickness_Steel_Add_Bot);
    InnerTubePV_vect.push_back(new G4PVPlacement(t_InnerTube, InnerTubeLV, "Inner_Tube_PV", ExpHallLV, false, 301, intersect_check));
    G4Transform3D t_PMMARingLower = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_PMMA_Ring-SteelZ/2-Thickness_Steel_Add_Bot);
    PMMARingLowerPV_vect.push_back(new G4PVPlacement(t_PMMARingLower, PMMARingLowerLV, "PMMA_Ring_Lower_PV", ExpHallLV, false, 302, intersect_check));
    G4Transform3D t_PMMADisk = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_PMMA_Disk-SteelZ/2-Thickness_Steel_Add_Bot);
    PMMADiskPV_vect.push_back(new G4PVPlacement(t_PMMADisk, PMMADiskLV, "PMMA_Disk_PV", ExpHallLV, false, 303, intersect_check));
    G4Transform3D t_AirGap = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_Air_gap-SteelZ/2-Thickness_Steel_Add_Bot);
    AirGapOutPV_vect.push_back(new G4PVPlacement(t_AirGap, AirGapOutLV, "Air_Gap_Out_PV", ExpHallLV, false, 500, intersect_check));
    AirGapInPV_vect.push_back(new G4PVPlacement(t_AirGap, AirGapInLV, "Air_Gap_In_PV", ExpHallLV, false, 501, intersect_check));
    WLSOutPV_vect.push_back(new G4PVPlacement(t_WOMTube, WLSOutLV, "WLS_Out_PV", ExpHallLV, false, 600, intersect_check));
    WLSInPV_vect.push_back(new G4PVPlacement(t_WOMTube, WLSInLV, "WLS_In_PV", ExpHallLV, false, 601, intersect_check));
    G4Transform3D t_PMMAHat = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_PMMA_Hat-SteelZ/2-Thickness_Steel_Add_Bot);
    PMMAHatPV_vect.push_back(new G4PVPlacement(t_PMMAHat, PMMAHatLV, "PMMA_Hat_PV", ExpHallLV, false, 304, intersect_check));
    G4Transform3D t_AirRing = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_upper_ring-SteelZ/2-Thickness_Steel_Add_Bot);
    AirRingOutPV_vect.push_back(new G4PVPlacement(t_AirRing, AirRingOutLV, "Air_Ring_Out_PV", ExpHallLV, false, 502, intersect_check));
    AirRingInPV_vect.push_back(new G4PVPlacement(t_AirRing, AirRingInLV, "Air_Ring_In_PV", ExpHallLV, false, 503, intersect_check));
    PMMARingPV_vect.push_back(new G4PVPlacement(t_AirRing, PMMARingLV, "PMMA_Ring_PV", ExpHallLV, false, 305, intersect_check));
    G4Transform3D t_SctInside = G4Translate3D(WOM_coord_vec[pos].first,WOM_coord_vec[pos].second-Diam_Steel_Add/2,SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0,Diam_Steel_Add/2,delta_Z_Sct_Inside-SteelZ/2-Thickness_Steel_Add_Bot);
    SctInsidePV_vect.push_back(new G4PVPlacement(t_SctInside, SctInsideLV, "Sct_Inside_PV", ExpHallLV, false, 201, intersect_check));
    if(pos == 0) { for(int i = 0; i < n_sipm; i++) {
      G4RotationMatrix* RM2 = new G4RotationMatrix();
      RM2->rotateZ(-(i+0.5)*360./n_sipm*deg);
      G4double Xrotation = radius_sipm*std::cos((i + 0.5)*2*pi/n_sipm);
      G4double Yrotation = radius_sipm*std::sin((i + 0.5)*2*pi/n_sipm);
      sipmSensPV_vect.push_back(new G4PVPlacement(RM2, G4ThreeVector(Xrotation, Yrotation, -Length_sipm_box/2+sipmWindowThickness+sipmSensThicknessTop+sipmSensThickness/2), sipmSensLV, "sipm_Sens_PV", sipmBoxLV, false, sipm_id++, intersect_check));
      sipmSensTopPV = new G4PVPlacement(RM2, G4ThreeVector(Xrotation, Yrotation, -Length_sipm_box/2+sipmWindowThickness+sipmSensThicknessTop/2), sipmSensTopLV, "sipm_Sens_Top_PV", sipmBoxLV, false, 701, intersect_check);
      sipmWindowPV = new G4PVPlacement(RM2, G4ThreeVector(Xrotation, Yrotation, -Length_sipm_box/2+sipmWindowThickness), sipmWindowLV, "sipm_Window_PV", sipmBoxLV, false, 700, intersect_check);
      sipmBasePV = new G4PVPlacement(RM2, G4ThreeVector(Xrotation, Yrotation, -Length_sipm_box/2+sipmWindowThickness+sipmWindowThickness+sipmBaseThickness/2), sipmBaseBoxLV, "sipm_Base_PV", sipmBoxLV, false, 702, intersect_check);
    } }
    G4Transform3D t_sipmBox = G4Translate3D(WOM_coord_vec[pos].first, WOM_coord_vec[pos].second-Diam_Steel_Add/2, SteelZ/2+Thickness_Steel_Add_Bot)*G4Rotate3D(*RM1)*G4Translate3D(0, Diam_Steel_Add/2, delta_Z_WOM+Length_WOM/2+Length_sipm_box/2-SteelZ/2-Thickness_Steel_Add_Bot);
    sipmBoxPV_vect.push_back(new G4PVPlacement(t_sipmBox, sipmBoxLV, "sipm_Box_PV", ExpHallLV, false, wom_id++, intersect_check));
  }
}

void OpNoviceDetectorConstruction::DefineVisAttributes()
{
  grey        = G4Color(0.3, 0.3, 0.3, 0.2);
  blue        = G4Color(0.0, 0.0, 1.0, 0.3);
  green       = G4Color(0.0, 1.0, 0.0, 0.2);
  red         = G4Color(1.0, 0.0, 0.0, 0.2);
  white       = G4Color(1.0, 1.0, 1.0, 0.2);
  cyan        = G4Color(0.0, 1.0, 1.0, 0.3);
  magenta     = G4Color(1.0, 0.0, 1.0, 0.3);
  yellow      = G4Color(1.0, 1.0, 0.0, 0.3);

  G4VisAttributes *worldVisAtt = new G4VisAttributes;
  worldVisAtt->SetVisibility(false);
  worldVisAtt->SetColor(blue);
  ExpHallLV->SetVisAttributes(worldVisAtt);
  sipmBoxLV->SetVisAttributes(worldVisAtt);
  
  G4VisAttributes *steelBoxVisAtt = new G4VisAttributes;
  steelBoxVisAtt->SetVisibility(true);
  steelBoxVisAtt->SetColor(white);
  SteelBoxLV->SetVisAttributes(steelBoxVisAtt);

  G4VisAttributes *sctBoxVisAtt = new G4VisAttributes;
  sctBoxVisAtt->SetColor(blue);
  sctBoxVisAtt->SetVisibility(false);
  ScintillatorBoxLV->SetVisAttributes(sctBoxVisAtt);
  G4VisAttributes *sctBoxVisAtt1 = new G4VisAttributes;
  sctBoxVisAtt1->SetColor(blue);
  sctBoxVisAtt1->SetVisibility(false);
  SctInsideLV->SetVisAttributes(sctBoxVisAtt1);

  G4VisAttributes *PMMAVisAtt = new G4VisAttributes;
  PMMAVisAtt->SetVisibility(true);
  PMMAVisAtt->SetColor(grey);
  PMMADiskLV->SetVisAttributes(PMMAVisAtt);
  PMMARingLowerLV->SetVisAttributes(PMMAVisAtt);
  PMMAHatLV->SetVisAttributes(PMMAVisAtt);
  OuterTubeLV->SetVisAttributes(PMMAVisAtt);
  InnerTubeLV->SetVisAttributes(PMMAVisAtt);
  PMMARingLV->SetVisAttributes(PMMAVisAtt);

  G4VisAttributes *airVisAtt = new G4VisAttributes;
  airVisAtt->SetColor(green);
  airVisAtt->SetVisibility(false);
  AirGapOutLV->SetVisAttributes(airVisAtt);
  AirGapInLV->SetVisAttributes(airVisAtt);
  AirRingOutLV->SetVisAttributes(airVisAtt);
  AirRingInLV->SetVisAttributes(airVisAtt);

  G4VisAttributes *WLSVisAtt = new G4VisAttributes;
  WLSVisAtt->SetColor(red);
  WLSVisAtt->SetVisibility(false);
  WLSOutLV->SetVisAttributes(WLSVisAtt);
  WLSInLV->SetVisAttributes(WLSVisAtt);

  G4VisAttributes *WOMVisAtt = new G4VisAttributes;
  WOMVisAtt->SetColor(magenta);
  WOMVisAtt->SetVisibility(true);
  WOMTubeLV->SetVisAttributes(WOMVisAtt);

  G4VisAttributes *sipmVisAtt1 = new G4VisAttributes;
  sipmVisAtt1->SetColor(cyan);
  sipmVisAtt1->SetVisibility(false);
  sipmWindowLV->SetVisAttributes(sipmVisAtt1);
  G4VisAttributes *sipmVisAtt2 = new G4VisAttributes;
  sipmVisAtt2->SetColor(cyan);
  sipmVisAtt2->SetVisibility(false);
  sipmBaseBoxLV->SetVisAttributes(sipmVisAtt2);
  G4VisAttributes *sipmVisAtt3 = new G4VisAttributes;
  sipmVisAtt3->SetColor(cyan);
  sipmVisAtt3->SetVisibility(false);
  sipmSensLV->SetVisAttributes(sipmVisAtt3);
  G4VisAttributes *sipmVisAtt4 = new G4VisAttributes;
  sipmVisAtt4->SetColor(cyan);
  sipmVisAtt4->SetVisibility(true);
  sipmSensTopLV->SetVisAttributes(sipmVisAtt4);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* OpNoviceDetectorConstruction::Construct()
{
  intersect_check = true; // global intersection check
  DefineMaterials();
  DefineMPTs();
  DefineSolids();
  DefineLogicalVolumes();
  ConstructVolumes();
  DefineSurfaces();
  DefineVisAttributes();
  return ExpHallPV;
}
